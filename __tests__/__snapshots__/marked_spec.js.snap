// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`./__tests__/compiled_tests/escaped_angles.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>&gt;
</article>"
`;

exports[`./__tests__/compiled_tests/gfm_autolinks.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>link with . <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>.

link with ! <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>!

link with : <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>:

link with , <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>,

link with ; <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>;

link with ) <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>)

link with nothing <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>

<h3 data-v-a056081e>Example 597</h3>
The scheme http will be inserted automatically:

<b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org</b>

<h3 data-v-a056081e>Example 598</h3>
After a valid domain, zero or more non-space non-&lt; characters may follow:

Visit <b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org/help\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org/help</b> for more information.

<h3 data-v-a056081e>Example 599</h3>
Trailing punctuation (specifically, ?, !, ., ,, :, *, _, and ~) will not be considered part of the autolink, though they may be included in the interior of the link:

Visit <b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org</b>.

Visit <b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org/a.b\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org/a.b</b>.

<h3 data-v-a056081e>Example 600</h3>
<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=Markup+(business)\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=Markup+(business)</b>

(<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=Markup+(business)\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=Markup+(business)</b>)

<h3 data-v-a056081e>Example 601</h3>
<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=(business))+ok\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=(business))+ok</b>

<h3 data-v-a056081e>Example 602</h3>
<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=commonmark&amp;hl=en\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=commonmark&amp;hl=en</b>

<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=commonmark\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=commonmark</b>&amp;amp;

<h3 data-v-a056081e>Example 603</h3>
&lt; immediately ends an autolink.

<b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org/he\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org/he</b>&lt;lp

<h3 data-v-a056081e>Example 604</h3>
<b title=\\"http
commonmark.org\\" href=\\"http://commonmark.org\\" chk=\\"confirm\\" data-v-a056081e>http://commonmark.org</b>

(Visit <b title=\\"https
encrypted.google.com\\" href=\\"https://encrypted.google.com/search?q=Markup+(business)\\" chk=\\"confirm\\" data-v-a056081e>https://encrypted.google.com/search?q=Markup+(business)</b>)

Anonymous FTP is available at <b title=\\"ftp
foo.bar.baz\\" href=\\"ftp://foo.bar.baz\\" chk=\\"confirm\\" data-v-a056081e>ftp://foo.bar.baz</b>.

Extended email autolinks:

<h3 data-v-a056081e>Example 605</h3>
<b title=\\"mailto:foo@bar.baz
\\" href=\\"mailto:foo@bar.baz\\" chk=\\"confirm\\" data-v-a056081e>foo@bar.baz</b>

<h3 data-v-a056081e>Example 606</h3>
hello@mail+xyz.example isn't valid, but <b title=\\"mailto:hello+xyz@mail.example
\\" href=\\"mailto:hello+xyz@mail.example\\" chk=\\"confirm\\" data-v-a056081e>hello+xyz@mail.example</b> is.

<h3 data-v-a056081e>Example 607</h3>
<b title=\\"mailto:a.b-c_d@a.b
\\" href=\\"mailto:a.b-c_d@a.b\\" chk=\\"confirm\\" data-v-a056081e>a.b-c_d@a.b</b>

<b title=\\"mailto:a.b-c_d@a.b
\\" href=\\"mailto:a.b-c_d@a.b\\" chk=\\"confirm\\" data-v-a056081e>a.b-c_d@a.b</b>.

a.b-c_d@a.b-

    a.b-c_d@a.b_
</article>"
`;

exports[`./__tests__/compiled_tests/gfm_break.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>breaks: true</h2>Look at the
pretty line
breaks.
</article>"
`;

exports[`./__tests__/compiled_tests/gfm_code.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><pre data-v-a056081e><code class=\\"undefinedjs\\" data-v-a056081e>var a = 'hello';
console.log(a + ' world');</code></pre>
<pre data-v-a056081e><code class=\\"undefinedbash\\" data-v-a056081e>echo &quot;hello, \${WORLD}&quot;</code></pre>
<pre data-v-a056081e><code class=\\"undefinedlongfence\\" data-v-a056081e>Q: What do you call a tall person who sells stolen goods?</code></pre>
<pre data-v-a056081e><code class=\\"undefinedManyTildes\\" data-v-a056081e>A longfence!</code></pre>
How about an empty code block?

<pre data-v-a056081e><code class=\\"undefinedjs\\" data-v-a056081e></code></pre>
How about a code block with only an empty line?

<pre data-v-a056081e><code class=\\"undefinedjs\\" data-v-a056081e></code></pre>
With some trailing empty lines:

<pre data-v-a056081e><code data-v-a056081e>ciao

</code></pre></article>"
`;

exports[`./__tests__/compiled_tests/gfm_code_hr_list.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h2 data-v-a056081e>foo</h2>
<ol data-v-a056081e><li data-v-a056081e>bar:

<blockquote data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>one
<ul data-v-a056081e><li data-v-a056081e>two
<ul data-v-a056081e><li data-v-a056081e>three</li><li data-v-a056081e>four</li><li data-v-a056081e>five</li></ul></li></ul></li></ul></blockquote></li><li data-v-a056081e>foo:

<pre data-v-a056081e><code data-v-a056081e> line 1
 line 2</code></pre></li><li data-v-a056081e>foo:

<ol data-v-a056081e><li data-v-a056081e>foo <code data-v-a056081e>bar</code> bar:

<pre data-v-a056081e><code class=\\"undefinederb\\" data-v-a056081e> some code here</code></pre></li><li data-v-a056081e>foo <code data-v-a056081e>bar</code> bar:

<pre data-v-a056081e><code class=\\"undefinederb\\" data-v-a056081e> foo
 ---
 bar
 ---
 foo
 bar</code></pre></li><li data-v-a056081e>foo <code data-v-a056081e>bar</code> bar:

<pre data-v-a056081e><code class=\\"undefinedhtml\\" data-v-a056081e> ---
 foo
 foo
 ---
 bar</code></pre></li><li data-v-a056081e>foo <code data-v-a056081e>bar</code> bar:

<h2 data-v-a056081e>     foo</h2>     bar
</li><li data-v-a056081e>foo
</li></ol></li></ol></article>"
`;

exports[`./__tests__/compiled_tests/gfm_del.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>hello <del data-v-a056081e>hi</del> world
</article>"
`;

exports[`./__tests__/compiled_tests/gfm_em.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>These words should_not_be_emphasized.
</article>"
`;

exports[`./__tests__/compiled_tests/gfm_hashtag.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: true</h2>#header

<h1 data-v-a056081e>header1</h1>
<h1 data-v-a056081e>header2</h1></article>"
`;

exports[`./__tests__/compiled_tests/gfm_links_invalid.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>sanitize: true</h2>This should not be linked: http://example.com/%ff
</article>"
`;

exports[`./__tests__/compiled_tests/gfm_tables.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><div class=\\"swipe\\" data-v-a056081e><table data-v-a056081e><thead data-v-a056081e><tr data-v-a056081e><th data-v-a056081e>Heading 1 </th><th data-v-a056081e> Heading 2</th></tr></thead><tbody data-v-a056081e><tr data-v-a056081e><td data-v-a056081e>Cell 1    </td><td data-v-a056081e> Cell 2</td></tr><tr data-v-a056081e><td data-v-a056081e>Cell 3    </td><td data-v-a056081e> Cell 4</td></tr></tbody></table></div>
<div class=\\"swipe\\" data-v-a056081e><table data-v-a056081e><thead data-v-a056081e><tr data-v-a056081e><th class=\\"c\\" data-v-a056081e>Header 1 </th><th class=\\"r\\" data-v-a056081e> Header 2 </th><th class=\\"l\\" data-v-a056081e> Header 3 </th><th data-v-a056081e> Header 4</th></tr></thead><tbody data-v-a056081e><tr data-v-a056081e><td class=\\"c\\" data-v-a056081e>Cell 1   </td><td class=\\"r\\" data-v-a056081e> Cell 2   </td><td class=\\"l\\" data-v-a056081e> Cell 3   </td><td data-v-a056081e> Cell 4</td></tr><tr data-v-a056081e><td class=\\"c\\" data-v-a056081e>Cell 5   </td><td class=\\"r\\" data-v-a056081e> Cell 6   </td><td class=\\"l\\" data-v-a056081e> Cell 7   </td><td data-v-a056081e> Cell 8</td></tr></tbody></table></div>
    Test code

<div class=\\"swipe\\" data-v-a056081e><table data-v-a056081e><thead data-v-a056081e><tr data-v-a056081e><th data-v-a056081e>Header 1 </th><th data-v-a056081e> Header 2</th></tr></thead><tbody data-v-a056081e><tr data-v-a056081e><td data-v-a056081e>Cell 1   </td><td data-v-a056081e> Cell 2</td></tr><tr data-v-a056081e><td data-v-a056081e>Cell 3   </td><td data-v-a056081e> Cell 4</td></tr></tbody></table></div>
<div class=\\"swipe\\" data-v-a056081e><table data-v-a056081e><thead data-v-a056081e><tr data-v-a056081e><th class=\\"l\\" data-v-a056081e>Header 1</th><th class=\\"c\\" data-v-a056081e>Header 2</th><th class=\\"r\\" data-v-a056081e>Header 3</th><th data-v-a056081e>Header 4</th></tr></thead><tbody data-v-a056081e><tr data-v-a056081e><td class=\\"l\\" data-v-a056081e>Cell 1  </td><td class=\\"c\\" data-v-a056081e>Cell 2  </td><td class=\\"r\\" data-v-a056081e>Cell 3  </td><td data-v-a056081e>Cell 4</td></tr><tr data-v-a056081e><td class=\\"l\\" data-v-a056081e>*Cell 5*</td><td class=\\"c\\" data-v-a056081e>Cell 6  </td><td class=\\"r\\" data-v-a056081e>Cell 7  </td><td data-v-a056081e>Cell 8</td></tr></tbody></table></div></article>"
`;

exports[`./__tests__/compiled_tests/hard_wrapped_paragraphs_with_list_like_lines.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2>In Markdown 1.0.0 and earlier. Version
<ol start=\\"8\\" data-v-a056081e><li data-v-a056081e>This line turns into a list item.
Because a hard-wrapped line in the
middle of a paragraph looked like a
list item.

</li></ol>Here's one with a bullet.
<ul data-v-a056081e><li data-v-a056081e>criminey.
</li></ul></article>"
`;

exports[`./__tests__/compiled_tests/headings_id.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h3 data-v-a056081e>Heading with a <b title=\\"http
github.com\\" href=\\"http://github.com/\\" chk=\\"confirm\\" data-v-a056081e>link</b></h3>
<h3 data-v-a056081e>Heading with some _italic text_</h3>
<h3 data-v-a056081e>Or some <strong data-v-a056081e>strong</strong></h3>(which doesn't really make any difference, here)

<h3 data-v-a056081e>Or even <code data-v-a056081e>code</code></h3>
<h3 data-v-a056081e>What about <del data-v-a056081e>strikethrough</del></h3>
<h2 data-v-a056081e>And a ref <b title=\\"link to nowhere\\" href=\\"/some/url\\" chk=\\"confirm\\" data-v-a056081e>link</b></h2>
</article>"
`;

exports[`./__tests__/compiled_tests/horizontal_rules.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2>Dashes:

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
    ---

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
<ul data-v-a056081e><li data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>-


</li></ul></li></ul>Asterisks:

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
    ***

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
<ul data-v-a056081e><li data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>*


</li></ul></li></ul>Underscores:

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
    ___

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
    _ _ _



Not horizontal rules:

--*

-*-

*--

 -_-

  __-

   -__

    _-_


Long rules:

<hr data-v-a056081e>
<hr data-v-a056081e>
<hr data-v-a056081e></article>"
`;

exports[`./__tests__/compiled_tests/hr_list_break.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>hello
world</li><li data-v-a056081e>how
are
</li></ul><hr data-v-a056081e>you today?
</article>"
`;

exports[`./__tests__/compiled_tests/html_comments.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h3 data-v-a056081e>Example 1</h3>
&lt;!-- comment --&gt;

<h3 data-v-a056081e>Example 2</h3>
&lt;!----&gt;

<h3 data-v-a056081e>Example 3</h3>
&lt;!-- --&gt;

<h3 data-v-a056081e>Example 4</h3>
&lt;!-- - --&gt;

<h3 data-v-a056081e>Example 5</h3>
&lt;!-- -- --&gt;

<h3 data-v-a056081e>Example 6</h3>
&lt;!-- ---&gt;

<h3 data-v-a056081e>Example 7</h3>
&lt;!-----&gt;

<h3 data-v-a056081e>Example 8</h3>
&lt;!------&gt;

<h3 data-v-a056081e>Example 9</h3>
&lt;!-- My favorite operators are &gt; and &lt;!--&gt;

<h3 data-v-a056081e>Example 10</h3>
&lt;!-- multi
line    
comment
--&gt;

<h3 data-v-a056081e>Example 11</h3>
   &lt;!-- indented comment --&gt;

    &lt;!-- too much indentation --&gt;

<h3 data-v-a056081e>Example 12</h3>
&lt;!<s data-v-a056081e>&gt; not a comment </s>&gt;

&lt;!<s data-v-a056081e>-&gt; not a comment </s>&gt;

&lt;!-- &lt;!-- not a comment? --&gt; --&gt;</article>"
`;

exports[`./__tests__/compiled_tests/inline_html_advanced.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2>Simple block on one line:

&lt;div&gt;foo&lt;/div&gt;

And nested without indentation:

&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
foo
&lt;/div&gt;
&lt;div style=&quot;&gt;&quot;/&gt;
&lt;/div&gt;
&lt;div&gt;bar&lt;/div&gt;
&lt;/div&gt;
</article>"
`;

exports[`./__tests__/compiled_tests/inline_html_comments.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2>Paragraph one.

&lt;!-- This is a simple comment --&gt;

&lt;!--
    This is another comment.
--&gt;

Paragraph two.

&lt;!-- one comment block -- -- with two comments --&gt;

The end.
</article>"
`;

exports[`./__tests__/compiled_tests/inline_html_simple.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2>Here's a simple block:

&lt;div&gt;
    foo
&lt;/div&gt;

This should be a code block, though:

    &lt;div&gt;
        foo
    &lt;/div&gt;

As should this:

    &lt;div&gt;foo&lt;/div&gt;

Now, nested:

&lt;div&gt;
    &lt;div&gt;
        &lt;div&gt;
            foo
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

This should just be an HTML comment:

&lt;!-- Comment --&gt;

Multiline:

&lt;!--
Blah
Blah
--&gt;

Code block:

    &lt;!-- Comment --&gt;

Just plain comment, with trailing spaces on the line:

&lt;!-- foo --&gt;   

Code:

    &lt;hr&gt;

Hr's:

&lt;hr&gt;

&lt;hr&gt;

&lt;hr&gt;

&lt;hr&gt;   

&lt;hr&gt;  

&lt;hr&gt; 

&lt;hr class=&quot;foo&quot; id=&quot;bar&quot; /&gt;

&lt;hr class=&quot;foo&quot; id=&quot;bar&quot;/&gt;

&lt;hr class=&quot;foo&quot; id=&quot;bar&quot; &gt;

</article>"
`;

exports[`./__tests__/compiled_tests/lazy_blockquotes.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><blockquote data-v-a056081e>hi there
bud</blockquote></article>"
`;

exports[`./__tests__/compiled_tests/link_lt.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><b title=\\"&lt;test
\\" href=\\"&lt;test\\" chk=\\"confirm\\" data-v-a056081e>URL</b>
</article>"
`;

exports[`./__tests__/compiled_tests/links.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>sanitize: true</h2>URL

URL

URL

URL

URL
</article>"
`;

exports[`./__tests__/compiled_tests/links_inline_style.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>pedantic: true
<h2 data-v-a056081e>gfm: false</h2>
Just a <b title=\\"
url\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL</b>.

<b title=\\"title\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL and title</b>.

<b title=\\"title preceded by two spaces\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL and title</b>.

<b title=\\"title preceded by a tab\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL and title</b>.

<b title=\\"title has spaces afterward\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL and title</b>.

[URL and title]( /url/has space ).

[URL and title]( /url/has space/ &quot;url has space and title&quot;).

<q title=\\"
\\" data-v-a056081e>Empty</q>.
</article>"
`;

exports[`./__tests__/compiled_tests/links_reference_style.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>pedantic: true
<h2 data-v-a056081e>gfm: false</h2>
Foo [bar] <b title=\\"Title\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>1</b>.

Foo <b title=\\"Title\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>bar</b>.

Foo [bar]
<b title=\\"Title\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>1</b>.



With [embedded [brackets]] <b title=\\"
url\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>b</b>.


Indented <b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>once</b>.

Indented <b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>twice</b>.

Indented <b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>thrice</b>.

Indented [four][] times.




    [four]: /url



<hr data-v-a056081e>
<b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b> <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b> should work

So should <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b>.

And <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b> [].

And <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b>.

And <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b>.

But not [that] [].

Nor [that][].

Nor [that].

[Something in brackets like <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b> should work]

[Same with <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b>.]

In this case, <b title=\\"
somethingelse\\" href=\\"/somethingelse/\\" chk=\\"confirm\\" data-v-a056081e>this</b> points to something else.

Backslashing should suppress [this] and [this].



<hr data-v-a056081e>
Here's one where the <b title=\\"
url\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>link
breaks</b> across lines.

Here's another where the <b title=\\"
url\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>link
breaks</b> across lines, but with a line-ending space.


</article>"
`;

exports[`./__tests__/compiled_tests/links_shortcut_references.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>pedantic: true
<h2 data-v-a056081e>gfm: false</h2>
This is the <b title=\\"
simple\\" href=\\"/simple\\" chk=\\"confirm\\" data-v-a056081e>simple case</b>.




This one has a <b title=\\"
foo\\" href=\\"/foo\\" chk=\\"confirm\\" data-v-a056081e>line
break</b>.

This one has a <b title=\\"
foo\\" href=\\"/foo\\" chk=\\"confirm\\" data-v-a056081e>line
break</b> with a line-ending space.



<b title=\\"
this\\" href=\\"/this\\" chk=\\"confirm\\" data-v-a056081e>this</b> <b title=\\"
that\\" href=\\"/that\\" chk=\\"confirm\\" data-v-a056081e>that</b> and the <b title=\\"
other\\" href=\\"/other\\" chk=\\"confirm\\" data-v-a056081e>other</b>

</article>"
`;

exports[`./__tests__/compiled_tests/list_item_text.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>item1

<ul data-v-a056081e><li data-v-a056081e>item2

</li></ul>text
</li></ul></article>"
`;

exports[`./__tests__/compiled_tests/literal_quotes_in_titles.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>pedantic: true
<h2 data-v-a056081e>gfm: false</h2>
Foo [bar][].

Foo [bar](/url/ &quot;Title with &quot;quotes&quot; inside&quot;).


  [bar]: /url/ &quot;Title with &quot;quotes&quot; inside&quot;

</article>"
`;

exports[`./__tests__/compiled_tests/loose_lists.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>hello
world

how
are</li><li data-v-a056081e>you



</li></ul>better behavior:

<ul data-v-a056081e><li data-v-a056081e>hello
<ul data-v-a056081e><li data-v-a056081e>world
how

are
you
</li><li data-v-a056081e>today</li></ul></li><li data-v-a056081e>hi



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello
</li><li data-v-a056081e>world</li><li data-v-a056081e>hi



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>world
</li><li data-v-a056081e>hi



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>world

how</li><li data-v-a056081e>hi



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>world</li><li data-v-a056081e>how

are



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>world
</li><li data-v-a056081e>how

are
</li></ul></article>"
`;

exports[`./__tests__/compiled_tests/main.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>
<h1 data-v-a056081e>A heading</h1>
Just a note, I've found that I can't test my markdown parser vs others.
For example, both markdown.js and showdown code blocks in lists wrong. They're
also completely <b title=\\"Google\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>inconsistent</b> with regards to paragraphs in list items.

A link. Not anymore.

&lt;aside&gt;This will make me fail the test because
markdown.js doesnt acknowledge arbitrary html blocks =/&lt;/aside&gt;

<ul data-v-a056081e><li data-v-a056081e>List Item 1
</li><li data-v-a056081e>List Item 2
<ul data-v-a056081e><li data-v-a056081e>New List Item 1
Hi, this is a list item.</li><li data-v-a056081e>New List Item 2
Another item
    Code goes here.
    Lots of it...</li><li data-v-a056081e>New List Item 3
The last item
</li></ul></li><li data-v-a056081e>List Item 3
The final item.
</li><li data-v-a056081e>List Item 4
The real final item.

</li></ul>Paragraph.

<blockquote data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>bq Item 1</li><li data-v-a056081e>bq Item 2
<ul data-v-a056081e><li data-v-a056081e>New bq Item 1</li><li data-v-a056081e>New bq Item 2
Text here</li></ul></li></ul></blockquote>
<hr data-v-a056081e>
<blockquote data-v-a056081e>Another blockquote!
I really need to get
more creative with
mockup text..
markdown.js breaks here again</blockquote>
<h2 data-v-a056081e>Another Heading</h2>
Hello *world*. Here is a <b title=\\"
\\" href=\\"//hello\\" chk=\\"confirm\\" data-v-a056081e>link</b>.
And an image <img src=\\"src\\" alt=\\"alt\\" data-v-a056081e>.

    Code goes here.
    Lots of it...
</article>"
`;

exports[`./__tests__/compiled_tests/mangle_xss.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>sanatize: true
<h2 data-v-a056081e>mangle: false</h2>&lt;&lt;svg/onload=&quot;alert(1)&quot;//@x&gt;

&lt;bar&quot;onclick=&quot;alert('XSS')&quot;@foo&gt;
</article>"
`;

exports[`./__tests__/compiled_tests/markdown_documentation_basics.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>pedantic: true
<h2 data-v-a056081e>gfm: false</h2>
<h1 data-v-a056081e>Markdown: Basics</h1>
&lt;ul id=&quot;ProjectSubmenu&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/&quot; title=&quot;Markdown Project Page&quot;&gt;Main&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;selected&quot; title=&quot;Markdown Basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/syntax&quot; title=&quot;Markdown Syntax Documentation&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/license&quot; title=&quot;Pricing and License Information&quot;&gt;License&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/dingus&quot; title=&quot;Online Markdown Web Form&quot;&gt;Dingus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


<h2 data-v-a056081e>Getting the Gist of Markdown's Formatting Syntax</h2>
This page offers a brief overview of what it's like to use Markdown.
The [syntax page] <b title=\\"Markdown Syntax\\" href=\\"/projects/markdown/syntax\\" chk=\\"confirm\\" data-v-a056081e>s</b> provides complete, detailed documentation for
every feature, but Markdown should be very easy to pick up simply by
looking at a few examples of it in action. The examples on this page
are written in a before/after style, showing example syntax and the
HTML output produced by Markdown.

It's also helpful to simply try Markdown out; the [Dingus] <b title=\\"Markdown Dingus\\" href=\\"/projects/markdown/dingus\\" chk=\\"confirm\\" data-v-a056081e>d</b> is a
web application that allows you type your own Markdown-formatted text
and translate it to XHTML.

<strong data-v-a056081e>Note:</strong> This document is itself written using Markdown; you
can [see the source for it by adding '.text' to the URL] <b title=\\"
projects\\" href=\\"/projects/markdown/basics.text\\" chk=\\"confirm\\" data-v-a056081e>src</b>.



<h2 data-v-a056081e>Paragraphs, Headers, Blockquotes</h2>
A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.

Markdown offers two styles of headers: *Setext* and *atx*.
Setext-style headers for <code data-v-a056081e>&lt;h1&gt;</code> and <code data-v-a056081e>&lt;h2&gt;</code> are created by
&quot;underlining&quot; with equal signs (<code data-v-a056081e>=</code>) and hyphens (<code data-v-a056081e>-</code>), respectively.
To create an atx-style header, you put 1-6 hash marks (<code data-v-a056081e>#</code>) at the
beginning of the line -- the number of hashes equals the resulting
HTML header level.

Blockquotes are indicated using email-style '<code data-v-a056081e>&gt;</code>' angle brackets.

Markdown:

<h1 data-v-a056081e>    A First Level Header</h1>    
<h2 data-v-a056081e>    A Second Level Header</h2>
    Now is the time for all good men to come to
    the aid of their country. This is just a
    regular paragraph.

    The quick brown fox jumped over the lazy
    dog's back.
    
<h3 data-v-a056081e>Header 3</h3>
    &gt; This is a blockquote.
    &gt;
    &gt; This is the second paragraph in the blockquote.
    &gt;
    &gt; ## This is an H2 in a blockquote


Output:

    &lt;h1&gt;A First Level Header&lt;/h1&gt;

    &lt;h2&gt;A Second Level Header&lt;/h2&gt;

    &lt;p&gt;Now is the time for all good men to come to
    the aid of their country. This is just a
    regular paragraph.&lt;/p&gt;

    &lt;p&gt;The quick brown fox jumped over the lazy
    dog's back.&lt;/p&gt;

    &lt;h3&gt;Header 3&lt;/h3&gt;

    &lt;blockquote&gt;
        &lt;p&gt;This is a blockquote.&lt;/p&gt;

        &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;

        &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;
    &lt;/blockquote&gt;



<h3 data-v-a056081e>Phrase Emphasis</h3>
Markdown uses asterisks and underscores to indicate spans of emphasis.

Markdown:

    Some of these words *are emphasized*.
    Some of these words _are emphasized also_.

    Use two asterisks for <strong data-v-a056081e>strong emphasis</strong>.
    Or, if you prefer, <strong data-v-a056081e>use two underscores instead</strong>.

Output:

    &lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.
    Some of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.
    Or, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;
   


<h2 data-v-a056081e>Lists</h2>
Unordered (bulleted) lists use asterisks, pluses, and hyphens (<code data-v-a056081e>*</code>,
<code data-v-a056081e>+</code>, and <code data-v-a056081e>-</code>) as list markers. These three markers are
interchangable; this:

<ul data-v-a056081e><li data-v-a056081e>Candy.</li><li data-v-a056081e>Gum.</li><li data-v-a056081e>Booze.

</li></ul>this:

<ul data-v-a056081e><li data-v-a056081e>Candy.</li><li data-v-a056081e>Gum.</li><li data-v-a056081e>Booze.

</li></ul>and this:

<ul data-v-a056081e><li data-v-a056081e>Candy.</li><li data-v-a056081e>Gum.</li><li data-v-a056081e>Booze.

</li></ul>all produce the same output:

    &lt;ul&gt;
    &lt;li&gt;Candy.&lt;/li&gt;
    &lt;li&gt;Gum.&lt;/li&gt;
    &lt;li&gt;Booze.&lt;/li&gt;
    &lt;/ul&gt;

Ordered (numbered) lists use regular numbers, followed by periods, as
list markers:

<ol data-v-a056081e><li data-v-a056081e>Red</li><li data-v-a056081e>Green</li><li data-v-a056081e>Blue

</li></ol>Output:

    &lt;ol&gt;
    &lt;li&gt;Red&lt;/li&gt;
    &lt;li&gt;Green&lt;/li&gt;
    &lt;li&gt;Blue&lt;/li&gt;
    &lt;/ol&gt;

If you put blank lines between items, you'll get <code data-v-a056081e>&lt;p&gt;</code> tags for the
list item text. You can create multi-paragraph list items by indenting
the paragraphs by 4 spaces or 1 tab:

<ul data-v-a056081e><li data-v-a056081e>A list item.

With multiple paragraphs.
</li><li data-v-a056081e>Another item in the list.

</li></ul>Output:

    &lt;ul&gt;
    &lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;
    &lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;
    &lt;/ul&gt;
    


<h3 data-v-a056081e>Links</h3>
Markdown supports two styles for creating links: *inline* and
*reference*. With both styles, you use square brackets to delimit the
text you want to turn into a link.

Inline-style links use parentheses immediately after the link text.
For example:

    This is an <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>example link</b>.

Output:

    &lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot;&gt;
    example link&lt;/a&gt;.&lt;/p&gt;

Optionally, you may include a title attribute in the parentheses:

    This is an <b title=\\"With a Title\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>example link</b>.

Output:

    &lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot; title=&quot;With a Title&quot;&gt;
    example link&lt;/a&gt;.&lt;/p&gt;

Reference-style links allow you to refer to your links by names, which
you define elsewhere in your document:

    I get 10 times more traffic from [Google][1] than from
    [Yahoo][2] or [MSN][3].

    [1]: <b title=\\"http
google.com\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>http://google.com/</b>        &quot;Google&quot;
    [2]: <b title=\\"http
search.yahoo.com\\" href=\\"http://search.yahoo.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.yahoo.com/</b>  &quot;Yahoo Search&quot;
    [3]: <b title=\\"http
search.msn.com\\" href=\\"http://search.msn.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.msn.com/</b>    &quot;MSN Search&quot;

Output:

    &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
    title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot;
    title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot;
    title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;

The title attribute is optional. Link names may contain letters,
numbers and spaces, but are *not* case sensitive:

    I start my morning with a cup of coffee and
    [The New York Times][NY Times].

    [ny times]: <b title=\\"http
www.nytimes.com\\" href=\\"http://www.nytimes.com/\\" chk=\\"confirm\\" data-v-a056081e>http://www.nytimes.com/</b>

Output:

    &lt;p&gt;I start my morning with a cup of coffee and
    &lt;a href=&quot;http://www.nytimes.com/&quot;&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;


<h3 data-v-a056081e>Images</h3>
Image syntax is very much like link syntax.

Inline (titles are optional):

    <img src=\\"/path/to/img.jpg\\" alt=\\"alt text\\" title=\\"Title\\" data-v-a056081e>

Reference-style:

    ![alt text][id]

    [id]: /path/to/img.jpg &quot;Title&quot;

Both of the above examples produce the same output:

    &lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot; /&gt;



<h3 data-v-a056081e>Code</h3>
In a regular paragraph, you can create code span by wrapping text in
backtick quotes. Any ampersands (<code data-v-a056081e>&amp;</code>) and angle brackets (<code data-v-a056081e>&lt;</code> or
<code data-v-a056081e>&gt;</code>) will automatically be translated into HTML entities. This makes
it easy to use Markdown to write about HTML example code:

    I strongly recommend against using any <code data-v-a056081e>&lt;blink&gt;</code> tags.

    I wish SmartyPants used named entities like <code data-v-a056081e>&amp;mdash;</code>
    instead of decimal-encoded entites like <code data-v-a056081e>&amp;#8212;</code>.

Output:

    &lt;p&gt;I strongly recommend against using any
    &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

    &lt;p&gt;I wish SmartyPants used named entities like
    &lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded
    entites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;


To specify an entire block of pre-formatted code, indent every line of
the block by 4 spaces or 1 tab. Just like with code spans, <code data-v-a056081e>&amp;</code>, <code data-v-a056081e>&lt;</code>,
and <code data-v-a056081e>&gt;</code> characters will be escaped automatically.

Markdown:

    If you want your page to validate under XHTML 1.0 Strict,
    you've got to put paragraph tags in your blockquotes:

        &lt;blockquote&gt;
            &lt;p&gt;For example.&lt;/p&gt;
        &lt;/blockquote&gt;

Output:

    &lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,
    you've got to put paragraph tags in your blockquotes:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;
        &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;
    &amp;lt;/blockquote&amp;gt;
    &lt;/code&gt;&lt;/pre&gt;
</article>"
`;

exports[`./__tests__/compiled_tests/markdown_documentation_syntax.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>pedantic: true
<h2 data-v-a056081e>gfm: false</h2>
<h1 data-v-a056081e>Markdown: Syntax</h1>
&lt;ul id=&quot;ProjectSubmenu&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/&quot; title=&quot;Markdown Project Page&quot;&gt;Main&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/basics&quot; title=&quot;Markdown Basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;selected&quot; title=&quot;Markdown Syntax Documentation&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/license&quot; title=&quot;Pricing and License Information&quot;&gt;License&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/dingus&quot; title=&quot;Online Markdown Web Form&quot;&gt;Dingus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


<ul data-v-a056081e><li data-v-a056081e><b title=\\"
overview\\" href=\\"#overview\\" chk=\\"confirm\\" data-v-a056081e>Overview</b>
<ul data-v-a056081e><li data-v-a056081e><b title=\\"
philosophy\\" href=\\"#philosophy\\" chk=\\"confirm\\" data-v-a056081e>Philosophy</b></li><li data-v-a056081e><b title=\\"
html\\" href=\\"#html\\" chk=\\"confirm\\" data-v-a056081e>Inline HTML</b></li><li data-v-a056081e><b title=\\"
autoescape\\" href=\\"#autoescape\\" chk=\\"confirm\\" data-v-a056081e>Automatic Escaping for Special Characters</b></li></ul></li><li data-v-a056081e><b title=\\"
block\\" href=\\"#block\\" chk=\\"confirm\\" data-v-a056081e>Block Elements</b>
<ul data-v-a056081e><li data-v-a056081e><b title=\\"
p\\" href=\\"#p\\" chk=\\"confirm\\" data-v-a056081e>Paragraphs and Line Breaks</b></li><li data-v-a056081e><b title=\\"
header\\" href=\\"#header\\" chk=\\"confirm\\" data-v-a056081e>Headers</b></li><li data-v-a056081e><b title=\\"
blockquote\\" href=\\"#blockquote\\" chk=\\"confirm\\" data-v-a056081e>Blockquotes</b></li><li data-v-a056081e><b title=\\"
list\\" href=\\"#list\\" chk=\\"confirm\\" data-v-a056081e>Lists</b></li><li data-v-a056081e><b title=\\"
precode\\" href=\\"#precode\\" chk=\\"confirm\\" data-v-a056081e>Code Blocks</b></li><li data-v-a056081e><b title=\\"
hr\\" href=\\"#hr\\" chk=\\"confirm\\" data-v-a056081e>Horizontal Rules</b></li></ul></li><li data-v-a056081e><b title=\\"
span\\" href=\\"#span\\" chk=\\"confirm\\" data-v-a056081e>Span Elements</b>
<ul data-v-a056081e><li data-v-a056081e><b title=\\"
link\\" href=\\"#link\\" chk=\\"confirm\\" data-v-a056081e>Links</b></li><li data-v-a056081e><b title=\\"
em\\" href=\\"#em\\" chk=\\"confirm\\" data-v-a056081e>Emphasis</b></li><li data-v-a056081e><b title=\\"
code\\" href=\\"#code\\" chk=\\"confirm\\" data-v-a056081e>Code</b></li><li data-v-a056081e><b title=\\"
img\\" href=\\"#img\\" chk=\\"confirm\\" data-v-a056081e>Images</b></li></ul></li><li data-v-a056081e><b title=\\"
misc\\" href=\\"#misc\\" chk=\\"confirm\\" data-v-a056081e>Miscellaneous</b>
<ul data-v-a056081e><li data-v-a056081e><b title=\\"
backslash\\" href=\\"#backslash\\" chk=\\"confirm\\" data-v-a056081e>Backslash Escapes</b></li><li data-v-a056081e><b title=\\"
autolink\\" href=\\"#autolink\\" chk=\\"confirm\\" data-v-a056081e>Automatic Links</b>


</li></ul></li></ul><strong data-v-a056081e>Note:</strong> This document is itself written using Markdown; you
can <b title=\\"
projects\\" href=\\"/projects/markdown/syntax.text\\" chk=\\"confirm\\" data-v-a056081e>see the source for it by adding '.text' to the URL</b>.


<hr data-v-a056081e>
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h3&gt;

Markdown is intended to be as easy-to-read and easy-to-write as is feasible.

Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it's been marked up with tags or formatting instructions. While
Markdown's syntax has been influenced by several existing text-to-HTML
filters <s data-v-a056081e> including [Setext] <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/mirror/setext.html\\" chk=\\"confirm\\" data-v-a056081e>1</b>, [atx] <b title=\\"http
www.aaronsw.com\\" href=\\"http://www.aaronsw.com/2002/atx/\\" chk=\\"confirm\\" data-v-a056081e>2</b>, [Textile] <b title=\\"http
textism.com\\" href=\\"http://textism.com/tools/textile/\\" chk=\\"confirm\\" data-v-a056081e>3</b>, [reStructuredText] <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/rst.html\\" chk=\\"confirm\\" data-v-a056081e>4</b>,
[Grutatext] <b title=\\"http
www.triptico.com\\" href=\\"http://www.triptico.com/software/grutatxt.html\\" chk=\\"confirm\\" data-v-a056081e>5</b>, and [EtText] <b title=\\"http
ettext.taint.org\\" href=\\"http://ettext.taint.org/doc/\\" chk=\\"confirm\\" data-v-a056081e>6</b> </s> the single biggest source of
inspiration for Markdown's syntax is the format of plain text email.


To this end, Markdown's syntax is comprised entirely of punctuation
characters, which punctuation characters have been carefully chosen so
as to look like what they mean. E.g., asterisks around a word actually
look like *emphasis*. Markdown lists look like, well, lists. Even
blockquotes look like quoted passages of text, assuming you've ever
used email.



&lt;h3 id=&quot;html&quot;&gt;Inline HTML&lt;/h3&gt;

Markdown's syntax is intended for one purpose: to be used as a
format for *writing* for the web.

Markdown is not a replacement for HTML, or even close to it. Its
syntax is very small, corresponding only to a very small subset of
HTML tags. The idea is *not* to create a syntax that makes it easier
to insert HTML tags. In my opinion, HTML tags are already easy to
insert. The idea for Markdown is to make it easy to read, write, and
edit prose. HTML is a *publishing* format; Markdown is a *writing*
format. Thus, Markdown's formatting syntax only addresses issues that
can be conveyed in plain text.

For any markup that is not covered by Markdown's syntax, you simply
use HTML itself. There's no need to preface it or delimit it to
indicate that you're switching from Markdown to HTML; you just use
the tags.

The only restrictions are that block-level HTML elements <s data-v-a056081e> e.g. <code data-v-a056081e>&lt;div&gt;</code>,
<code data-v-a056081e>&lt;table&gt;</code>, <code data-v-a056081e>&lt;pre&gt;</code>, <code data-v-a056081e>&lt;p&gt;</code>, etc. </s> must be separated from surrounding
content by blank lines, and the start and end tags of the block should
not be indented with tabs or spaces. Markdown is smart enough not
to add extra (unwanted) <code data-v-a056081e>&lt;p&gt;</code> tags around HTML block-level tags.

For example, to add an HTML table to a Markdown article:

    This is a regular paragraph.

    &lt;table&gt;
        &lt;tr&gt;
            &lt;td&gt;Foo&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;

    This is another regular paragraph.

Note that Markdown formatting syntax is not processed within block-level
HTML tags. E.g., you can't use Markdown-style <code data-v-a056081e>*emphasis*</code> inside an
HTML block.

Span-level HTML tags <s data-v-a056081e> e.g. <code data-v-a056081e>&lt;span&gt;</code>, <code data-v-a056081e>&lt;cite&gt;</code>, or <code data-v-a056081e>&lt;del&gt;</code> </s> can be
used anywhere in a Markdown paragraph, list item, or header. If you
want, you can even use HTML tags instead of Markdown formatting; e.g. if
you'd prefer to use HTML <code data-v-a056081e>&lt;a&gt;</code> or <code data-v-a056081e>&lt;img&gt;</code> tags instead of Markdown's
link or image syntax, go right ahead.

Unlike block-level HTML tags, Markdown syntax *is* processed within
span-level tags.


&lt;h3 id=&quot;autoescape&quot;&gt;Automatic Escaping for Special Characters&lt;/h3&gt;

In HTML, there are two characters that demand special treatment: <code data-v-a056081e>&lt;</code>
and <code data-v-a056081e>&amp;</code>. Left angle brackets are used to start tags; ampersands are
used to denote HTML entities. If you want to use them as literal
characters, you must escape them as entities, e.g. <code data-v-a056081e>&amp;lt;</code>, and
<code data-v-a056081e>&amp;amp;</code>.

Ampersands in particular are bedeviling for web writers. If you want to
write about 'AT&amp;T', you need to write '<code data-v-a056081e>AT&amp;amp;T</code>'. You even need to
escape ampersands within URLs. Thus, if you want to link to:

    <b title=\\"http
images.google.com\\" href=\\"http://images.google.com/images?num=30&amp;q=larry+bird\\" chk=\\"confirm\\" data-v-a056081e>http://images.google.com/images?num=30&amp;q=larry+bird</b>

you need to encode the URL as:

    <b title=\\"http
images.google.com\\" href=\\"http://images.google.com/images?num=30&amp;amp;q=larry+bird\\" chk=\\"confirm\\" data-v-a056081e>http://images.google.com/images?num=30&amp;amp;q=larry+bird</b>

in your anchor tag <code data-v-a056081e>href</code> attribute. Needless to say, this is easy to
forget, and is probably the single most common source of HTML validation
errors in otherwise well-marked-up web sites.

Markdown allows you to use these characters naturally, taking care of
all the necessary escaping for you. If you use an ampersand as part of
an HTML entity, it remains unchanged; otherwise it will be translated
into <code data-v-a056081e>&amp;amp;</code>.

So, if you want to include a copyright symbol in your article, you can write:

    &amp;copy;

and Markdown will leave it alone. But if you write:

    AT&amp;T

Markdown will translate it to:

    AT&amp;amp;T

Similarly, because Markdown supports <b title=\\"
html\\" href=\\"#html\\" chk=\\"confirm\\" data-v-a056081e>inline HTML</b>, if you use
angle brackets as delimiters for HTML tags, Markdown will treat them as
such. But if you write:

    4 &lt; 5

Markdown will translate it to:

    4 &amp;lt; 5

However, inside Markdown code spans and blocks, angle brackets and
ampersands are *always* encoded automatically. This makes it easy to use
Markdown to write about HTML code. (As opposed to raw HTML, which is a
terrible format for writing about HTML syntax, because every single <code data-v-a056081e>&lt;</code>
and <code data-v-a056081e>&amp;</code> in your example code needs to be escaped.)


<hr data-v-a056081e>

&lt;h2 id=&quot;block&quot;&gt;Block Elements&lt;/h2&gt;


&lt;h3 id=&quot;p&quot;&gt;Paragraphs and Line Breaks&lt;/h3&gt;

A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.

The implication of the &quot;one or more consecutive lines of text&quot; rule is
that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type's &quot;Convert Line Breaks&quot; option) which translate every line break
character in a paragraph into a <code data-v-a056081e>&lt;br /&gt;</code> tag.

When you *do* want to insert a <code data-v-a056081e>&lt;br /&gt;</code> break tag using Markdown, you
end a line with two or more spaces, then type return.

Yes, this takes a tad more effort to create a <code data-v-a056081e>&lt;br /&gt;</code>, but a simplistic
&quot;every line break is a <code data-v-a056081e>&lt;br /&gt;</code>&quot; rule wouldn't work for Markdown.
Markdown's email-style <b title=\\"
blockquote\\" href=\\"#blockquote\\" chk=\\"confirm\\" data-v-a056081e>blockquoting</b> and multi-paragraph <b title=\\"
list\\" href=\\"#list\\" chk=\\"confirm\\" data-v-a056081e>list items</b>
work best <s data-v-a056081e> and look better </s> when you format them with hard breaks.




&lt;h3 id=&quot;header&quot;&gt;Headers&lt;/h3&gt;

Markdown supports two styles of headers, [Setext] <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/mirror/setext.html\\" chk=\\"confirm\\" data-v-a056081e>1</b> and [atx] <b title=\\"http
www.aaronsw.com\\" href=\\"http://www.aaronsw.com/2002/atx/\\" chk=\\"confirm\\" data-v-a056081e>2</b>.

Setext-style headers are &quot;underlined&quot; using equal signs (for first-level
headers) and dashes (for second-level headers). For example:

<h1 data-v-a056081e>    This is an H1</h1>
<h2 data-v-a056081e>    This is an H2</h2>
Any number of underlining <code data-v-a056081e>=</code>'s or <code data-v-a056081e>-</code>'s will work.

Atx-style headers use 1-6 hash characters at the start of the line,
corresponding to header levels 1-6. For example:

<h1 data-v-a056081e>This is an H1</h1>
<h2 data-v-a056081e>This is an H2</h2>
<h6 data-v-a056081e>This is an H6</h6>
Optionally, you may &quot;close&quot; atx-style headers. This is purely
cosmetic -- you can use this if you think it looks better. The
closing hashes don't even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.) :

<h1 data-v-a056081e>This is an H1</h1>
<h2 data-v-a056081e>This is an H2</h2>
<h3 data-v-a056081e>This is an H3</h3>

&lt;h3 id=&quot;blockquote&quot;&gt;Blockquotes&lt;/h3&gt;

Markdown uses email-style <code data-v-a056081e>&gt;</code> characters for blockquoting. If you're
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a <code data-v-a056081e>&gt;</code> before every line:

    &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
    &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
    &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
    &gt;
    &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
    &gt; id sem consectetuer libero luctus adipiscing.

Markdown allows you to be lazy and only put the <code data-v-a056081e>&gt;</code> before the first
line of a hard-wrapped paragraph:

    &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

    &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
    id sem consectetuer libero luctus adipiscing.

Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of <code data-v-a056081e>&gt;</code>:

    &gt; This is the first level of quoting.
    &gt;
    &gt; &gt; This is nested blockquote.
    &gt;
    &gt; Back to the first level.

Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:

    &gt; ## This is a header.
    &gt;
    &gt; 1.   This is the first list item.
    &gt; 2.   This is the second list item.
    &gt;
    &gt; Here's some example code:
    &gt;
    &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);

Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.


&lt;h3 id=&quot;list&quot;&gt;Lists&lt;/h3&gt;

Markdown supports ordered (numbered) and unordered (bulleted) lists.

Unordered lists use asterisks, pluses, and hyphens <s data-v-a056081e> interchangably
</s> as list markers:

<ul data-v-a056081e><li data-v-a056081e>Red</li><li data-v-a056081e>Green</li><li data-v-a056081e>Blue

</li></ul>is equivalent to:

<ul data-v-a056081e><li data-v-a056081e>Red</li><li data-v-a056081e>Green</li><li data-v-a056081e>Blue

</li></ul>and:

<ul data-v-a056081e><li data-v-a056081e>Red</li><li data-v-a056081e>Green</li><li data-v-a056081e>Blue

</li></ul>Ordered lists use numbers followed by periods:

<ol data-v-a056081e><li data-v-a056081e>Bird</li><li data-v-a056081e>McHale</li><li data-v-a056081e>Parish

</li></ol>It's important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:

    &lt;ol&gt;
    &lt;li&gt;Bird&lt;/li&gt;
    &lt;li&gt;McHale&lt;/li&gt;
    &lt;li&gt;Parish&lt;/li&gt;
    &lt;/ol&gt;

If you instead wrote the list in Markdown like this:

<ol data-v-a056081e><li data-v-a056081e>Bird</li><li data-v-a056081e>McHale</li><li data-v-a056081e>Parish

</li></ol>or even:

<ol start=\\"3\\" data-v-a056081e><li data-v-a056081e>Bird</li><li data-v-a056081e>McHale</li><li data-v-a056081e>Parish

</li></ol>you'd get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don't have to.

If you do use lazy list numbering, however, you should still start the
list with the number 1. At some point in the future, Markdown may support
starting ordered lists at an arbitrary number.

List markers typically start at the left margin, but may be indented by
up to three spaces. List markers must be followed by one or more spaces
or a tab.

To make lists look nice, you can wrap items with hanging indents:

<ul data-v-a056081e><li data-v-a056081e>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.</li><li data-v-a056081e>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.

</li></ul>But if you want to be lazy, you don't have to:

<ul data-v-a056081e><li data-v-a056081e>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.</li><li data-v-a056081e>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.

</li></ul>If list items are separated by blank lines, Markdown will wrap the
items in <code data-v-a056081e>&lt;p&gt;</code> tags in the HTML output. For example, this input:

<ul data-v-a056081e><li data-v-a056081e>Bird</li><li data-v-a056081e>Magic

</li></ul>will turn into:

    &lt;ul&gt;
    &lt;li&gt;Bird&lt;/li&gt;
    &lt;li&gt;Magic&lt;/li&gt;
    &lt;/ul&gt;

But this:

<ul data-v-a056081e><li data-v-a056081e>Bird
</li><li data-v-a056081e>Magic

</li></ul>will turn into:

    &lt;ul&gt;
    &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
    &lt;/ul&gt;

List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be intended by either 4 spaces
or one tab:

<ol data-v-a056081e><li data-v-a056081e>This is a list item with two paragraphs. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit. Aliquam hendrerit
mi posuere lectus.

Vestibulum enim wisi, viverra nec, fringilla in, laoreet
vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
sit amet velit.
</li><li data-v-a056081e>Suspendisse id sem consectetuer libero luctus adipiscing.

</li></ol>It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:

<ul data-v-a056081e><li data-v-a056081e>This is a list item with two paragraphs.

This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.
</li><li data-v-a056081e>Another item in the same list.

</li></ul>To put a blockquote within a list item, the blockquote's <code data-v-a056081e>&gt;</code>
delimiters need to be indented:

<ul data-v-a056081e><li data-v-a056081e>A list item with a blockquote:

<blockquote data-v-a056081e>This is a blockquote
inside a list item.</blockquote>
</li></ul>To put a code block within a list item, the code block needs
to be indented *twice* -- 8 spaces or two tabs:

<ul data-v-a056081e><li data-v-a056081e>A list item with a code block:

    &lt;code goes here&gt;


</li></ul>It's worth noting that it's possible to trigger an ordered list by
accident, by writing something like this:

<ol start=\\"1986\\" data-v-a056081e><li data-v-a056081e>What a great season.

</li></ol>In other words, a *number-period-space* sequence at the beginning of a
line. To avoid this, you can backslash-escape the period:

    1986. What a great season.



&lt;h3 id=&quot;precode&quot;&gt;Code Blocks&lt;/h3&gt;

Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both <code data-v-a056081e>&lt;pre&gt;</code> and <code data-v-a056081e>&lt;code&gt;</code> tags.

To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab. For example, given this input:

    This is a normal paragraph:

        This is a code block.

Markdown will generate:

    &lt;p&gt;This is a normal paragraph:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;This is a code block.
    &lt;/code&gt;&lt;/pre&gt;

One level of indentation <s data-v-a056081e> 4 spaces or 1 tab </s> is removed from each
line of the code block. For example, this:

    Here is an example of AppleScript:

        tell application &quot;Foo&quot;
            beep
        end tell

will turn into:

    &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
        beep
    end tell
    &lt;/code&gt;&lt;/pre&gt;

A code block continues until it reaches a line that is not indented
(or the end of the article).

Within a code block, ampersands (<code data-v-a056081e>&amp;</code>) and angle brackets (<code data-v-a056081e>&lt;</code> and <code data-v-a056081e>&gt;</code>)
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown -- just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:

        &lt;div class=&quot;footer&quot;&gt;
            &amp;copy; 2004 Foo Corporation
        &lt;/div&gt;

will turn into:

    &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
        &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;
    &lt;/code&gt;&lt;/pre&gt;

Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it's also easy to use Markdown to write about Markdown's own syntax.



&lt;h3 id=&quot;hr&quot;&gt;Horizontal Rules&lt;/h3&gt;

You can produce a horizontal rule tag (<code data-v-a056081e>&lt;hr&gt;</code>) by placing three or
more hyphens, asterisks, or underscores on a line by themselves. If you
wish, you may use spaces between the hyphens or asterisks. Each of the
following lines will produce a horizontal rule:

<ul data-v-a056081e><li data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>*

</li></ul></li></ul>    ***

    *****
    
<ul data-v-a056081e><li data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>-

</li></ul></li></ul>    ---------------------------------------

    _ _ _


<hr data-v-a056081e>
&lt;h2 id=&quot;span&quot;&gt;Span Elements&lt;/h2&gt;

&lt;h3 id=&quot;link&quot;&gt;Links&lt;/h3&gt;

Markdown supports two style of links: *inline* and *reference*.

In both styles, the link text is delimited by [square brackets].

To create an inline link, use a set of regular parentheses immediately
after the link text's closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an *optional*
title for the link, surrounded in quotes. For example:

    This is <b title=\\"Title\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>an example</b> inline link.

    <b title=\\"http
example.net\\" href=\\"http://example.net/\\" chk=\\"confirm\\" data-v-a056081e>This link</b> has no title attribute.

Will produce:

    &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
    an example&lt;/a&gt; inline link.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
    title attribute.&lt;/p&gt;

If you're referring to a local resource on the same server, you can
use relative paths:

    See my <b title=\\"
about\\" href=\\"/about/\\" chk=\\"confirm\\" data-v-a056081e>About</b> page for details.

Reference-style links use a second set of square brackets, inside
which you place a label of your choosing to identify the link:

    This is [an example][id] reference-style link.

You can optionally use a space to separate the sets of brackets:

    This is [an example] [id] reference-style link.

Then, anywhere in the document, you define your link label like this,
on a line by itself:

    [id]: <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>  &quot;Optional Title Here&quot;

That is:

<ul data-v-a056081e><li data-v-a056081e>Square brackets containing the link identifier (optionally
indented from the left margin using up to three spaces);</li><li data-v-a056081e>followed by a colon;</li><li data-v-a056081e>followed by one or more spaces (or tabs);</li><li data-v-a056081e>followed by the URL for the link;</li><li data-v-a056081e>optionally followed by a title attribute for the link, enclosed
in double or single quotes.

</li></ul>The link URL may, optionally, be surrounded by angle brackets:

    [id]: <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>  &quot;Optional Title Here&quot;

You can put the title attribute on the next line and use extra spaces
or tabs for padding, which tends to look better with longer URLs:

    [id]: <b title=\\"http
example.com\\" href=\\"http://example.com/longish/path/to/resource/here\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/longish/path/to/resource/here</b>
        &quot;Optional Title Here&quot;

Link definitions are only used for creating links during Markdown
processing, and are stripped from your document in the HTML output.

Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are *not* case sensitive. E.g. these two links:

    [link text][a]
    [link text][A]

are equivalent.

The *implicit link name* shortcut allows you to omit the name of the
link, in which case the link text itself is used as the name.
Just use an empty set of square brackets -- e.g., to link the word
&quot;Google&quot; to the google.com web site, you could simply write:

    [Google][]

And then define the link:

    [Google]: <b title=\\"http
google.com\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>http://google.com/</b>

Because link names may contain spaces, this shortcut even works for
multiple words in the link text:

    Visit [Daring Fireball][] for more information.

And then define the link:

    [Daring Fireball]: <b title=\\"http
daringfireball.net\\" href=\\"http://daringfireball.net/\\" chk=\\"confirm\\" data-v-a056081e>http://daringfireball.net/</b>

Link definitions can be placed anywhere in your Markdown document. I
tend to put them immediately after each paragraph in which they're
used, but if you want, you can put them all at the end of your
document, sort of like footnotes.

Here's an example of reference links in action:

    I get 10 times more traffic from [Google] <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/mirror/setext.html\\" chk=\\"confirm\\" data-v-a056081e>1</b> than from
    [Yahoo] <b title=\\"http
www.aaronsw.com\\" href=\\"http://www.aaronsw.com/2002/atx/\\" chk=\\"confirm\\" data-v-a056081e>2</b> or [MSN] <b title=\\"http
textism.com\\" href=\\"http://textism.com/tools/textile/\\" chk=\\"confirm\\" data-v-a056081e>3</b>.

      <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/mirror/setext.html\\" chk=\\"confirm\\" data-v-a056081e>1</b>: <b title=\\"http
google.com\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>http://google.com/</b>        &quot;Google&quot;
      <b title=\\"http
www.aaronsw.com\\" href=\\"http://www.aaronsw.com/2002/atx/\\" chk=\\"confirm\\" data-v-a056081e>2</b>: <b title=\\"http
search.yahoo.com\\" href=\\"http://search.yahoo.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.yahoo.com/</b>  &quot;Yahoo Search&quot;
      <b title=\\"http
textism.com\\" href=\\"http://textism.com/tools/textile/\\" chk=\\"confirm\\" data-v-a056081e>3</b>: <b title=\\"http
search.msn.com\\" href=\\"http://search.msn.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.msn.com/</b>    &quot;MSN Search&quot;

Using the implicit link name shortcut, you could instead write:

    I get 10 times more traffic from [Google][] than from
    [Yahoo][] or [MSN][].

      [google]: <b title=\\"http
google.com\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>http://google.com/</b>        &quot;Google&quot;
      [yahoo]:  <b title=\\"http
search.yahoo.com\\" href=\\"http://search.yahoo.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.yahoo.com/</b>  &quot;Yahoo Search&quot;
      [msn]:    <b title=\\"http
search.msn.com\\" href=\\"http://search.msn.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.msn.com/</b>    &quot;MSN Search&quot;

Both of the above examples will produce the following HTML output:

    &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
    title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
    &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
    or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;

For comparison, here is the same paragraph written using
Markdown's inline link style:

    I get 10 times more traffic from <b title=\\"Google\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>Google</b>
    than from <b title=\\"Yahoo Search\\" href=\\"http://search.yahoo.com/\\" chk=\\"confirm\\" data-v-a056081e>Yahoo</b> or
    <b title=\\"MSN Search\\" href=\\"http://search.msn.com/\\" chk=\\"confirm\\" data-v-a056081e>MSN</b>.

The point of reference-style links is not that they're easier to
write. The point is that with reference-style links, your document
source is vastly more readable. Compare the above examples: using
reference-style links, the paragraph itself is only 81 characters
long; with inline-style links, it's 176 characters; and as raw HTML,
it's 234 characters. In the raw HTML, there's more markup than there
is text.

With Markdown's reference-style links, a source document much more
closely resembles the final output, as rendered in a browser. By
allowing you to move the markup-related metadata out of the paragraph,
you can add links without interrupting the narrative flow of your
prose.


&lt;h3 id=&quot;em&quot;&gt;Emphasis&lt;/h3&gt;

Markdown treats asterisks (<code data-v-a056081e>*</code>) and underscores (<code data-v-a056081e>_</code>) as indicators of
emphasis. Text wrapped with one <code data-v-a056081e>*</code> or <code data-v-a056081e>_</code> will be wrapped with an
HTML <code data-v-a056081e>&lt;em&gt;</code> tag; double <code data-v-a056081e>*</code>'s or <code data-v-a056081e>_</code>'s will be wrapped with an HTML
<code data-v-a056081e>&lt;strong&gt;</code> tag. E.g., this input:

    *single asterisks*

    _single underscores_

    <strong data-v-a056081e>double asterisks</strong>

    <strong data-v-a056081e>double underscores</strong>

will produce:

    &lt;em&gt;single asterisks&lt;/em&gt;

    &lt;em&gt;single underscores&lt;/em&gt;

    &lt;strong&gt;double asterisks&lt;/strong&gt;

    &lt;strong&gt;double underscores&lt;/strong&gt;

You can use whichever style you prefer; the lone restriction is that
the same character must be used to open and close an emphasis span.

Emphasis can be used in the middle of a word:

    un*fucking*believable

But if you surround an <code data-v-a056081e>*</code> or <code data-v-a056081e>_</code> with spaces, it'll be treated as a
literal asterisk or underscore.

To produce a literal asterisk or underscore at a position where it
would otherwise be used as an emphasis delimiter, you can backslash
escape it:

    *this text is surrounded by literal asterisks*



&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

To indicate a span of code, wrap it with backtick quotes (<code data-v-a056081e>\` </code>).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:

    Use the <code data-v-a056081e>printf()</code> function.

will produce:

    &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;

To include a literal backtick character within a code span, you can use
multiple backticks as the opening and closing delimiters:

    <code data-v-a056081e>There is a literal backtick (\`) here.</code>

which will produce this:

    &lt;p&gt;&lt;code&gt;There is a literal backtick (\`) here.&lt;/code&gt;&lt;/p&gt;

The backtick delimiters surrounding a code span may include spaces --
one after the opening, one before the closing. This allows you to place
literal backtick characters at the beginning or end of a code span:

    A single backtick in a code span: <code data-v-a056081e>\` </code>

    A backtick-delimited string in a code span: <code data-v-a056081e>\`foo\` </code>

will produce:

    &lt;p&gt;A single backtick in a code span: &lt;code&gt;<code data-v-a056081e>&lt;/code&gt;&lt;/p&gt;
    
    &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;</code>foo\`&lt;/code&gt;&lt;/p&gt;

With a code span, ampersands and angle brackets are encoded as HTML
entities automatically, which makes it easy to include example HTML
tags. Markdown will turn this:

    Please don't use any <code data-v-a056081e>&lt;blink&gt;</code> tags.

into:

    &lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

You can write this:

    <code data-v-a056081e>&amp;#8212;</code> is the decimal-encoded equivalent of <code data-v-a056081e>&amp;mdash;</code>.

to produce:

    &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
    equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;



&lt;h3 id=&quot;img&quot;&gt;Images&lt;/h3&gt;

Admittedly, it's fairly difficult to devise a &quot;natural&quot; syntax for
placing images into a plain text document format.

Markdown uses an image syntax that is intended to resemble the syntax
for links, allowing for two styles: *inline* and *reference*.

Inline image syntax looks like this:

    <img src=\\"/path/to/img.jpg\\" alt=\\"Alt text\\" data-v-a056081e>

    <img src=\\"/path/to/img.jpg\\" alt=\\"Alt text\\" title=\\"Optional title\\" data-v-a056081e>

That is:

<ul data-v-a056081e><li data-v-a056081e>An exclamation mark: <code data-v-a056081e>!</code>;</li><li data-v-a056081e>followed by a set of square brackets, containing the <code data-v-a056081e>alt</code>
attribute text for the image;</li><li data-v-a056081e>followed by a set of parentheses, containing the URL or path to
the image, and an optional <code data-v-a056081e>title</code> attribute enclosed in double
or single quotes.

</li></ul>Reference-style image syntax looks like this:

    ![Alt text][id]

Where &quot;id&quot; is the name of a defined image reference. Image references
are defined using syntax identical to link references:

    [id]: url/to/image  &quot;Optional title attribute&quot;

As of this writing, Markdown has no syntax for specifying the
dimensions of an image; if this is important to you, you can simply
use regular HTML <code data-v-a056081e>&lt;img&gt;</code> tags.


<hr data-v-a056081e>

&lt;h2 id=&quot;misc&quot;&gt;Miscellaneous&lt;/h2&gt;

&lt;h3 id=&quot;autolink&quot;&gt;Automatic Links&lt;/h3&gt;

Markdown supports a shortcut style for creating &quot;automatic&quot; links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:

    <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>

Markdown will turn this into:

    &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;

Automatic links for email addresses work similarly, except that
Markdown will also perform a bit of randomized decimal and hex
entity-encoding to help obscure your address from address-harvesting
spambots. For example, Markdown will turn this:

    <b title=\\"mailto:address@example.com
\\" href=\\"mailto:address@example.com\\" chk=\\"confirm\\" data-v-a056081e>address@example.com</b>

into something like this:

    &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
    &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
    &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
    &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;

which will render in a browser as a clickable link to &quot;<b title=\\"mailto:address@example.com
\\" href=\\"mailto:address@example.com\\" chk=\\"confirm\\" data-v-a056081e>address@example.com</b>&quot;.

(This sort of entity-encoding trick will indeed fool many, if not
most, address-harvesting bots, but it definitely won't fool all of
them. It's better than nothing, but an address published in this way
will probably eventually start receiving spam.)



&lt;h3 id=&quot;backslash&quot;&gt;Backslash Escapes&lt;/h3&gt;

Markdown allows you to use backslash escapes to generate literal
characters which would otherwise have special meaning in Markdown's
formatting syntax. For example, if you wanted to surround a word with
literal asterisks (instead of an HTML <code data-v-a056081e>&lt;em&gt;</code> tag), you can backslashes
before the asterisks, like this:

    *literal asterisks*

Markdown provides backslash escapes for the following characters:

    \\\\   backslash
    \`   backtick
<ul data-v-a056081e><li data-v-a056081e>asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
<h1 data-v-a056081e>hash mark</h1></li><li data-v-a056081e>plus sign</li><li data-v-a056081e>minus sign (hyphen)
.   dot
!   exclamation mark

</li></ul></article>"
`;

exports[`./__tests__/compiled_tests/nested_blockquotes.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2><blockquote data-v-a056081e>foo

<blockquote data-v-a056081e>bar</blockquote>
foo</blockquote></article>"
`;

exports[`./__tests__/compiled_tests/nested_code.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><code data-v-a056081e>hi ther \`\` ok \`\`\` </code>

<code data-v-a056081e>\` </code>

<code data-v-a056081e>There is a literal backtick (\`) here.</code>

A backtick-delimited string in a code span: <code data-v-a056081e>\`foo\` </code>

Please don't use any <code data-v-a056081e>&lt;blink&gt;</code> tags.</article>"
`;

exports[`./__tests__/compiled_tests/nested_em.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>*test <strong data-v-a056081e>test</strong> test*

_test <strong data-v-a056081e>test</strong> test_
</article>"
`;

exports[`./__tests__/compiled_tests/nested_square_link.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>the <code data-v-a056081e>]</code> character</b>

<b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>the \` character</b>
</article>"
`;

exports[`./__tests__/compiled_tests/nogfm_hashtag.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2>#header

<h1 data-v-a056081e>header1</h1>
<h1 data-v-a056081e>header2</h1></article>"
`;

exports[`./__tests__/compiled_tests/not_a_link.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>[test](not a link)
</article>"
`;

exports[`./__tests__/compiled_tests/ordered_and_unordered_lists.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2><h2 data-v-a056081e>Unordered</h2>
Asterisks tight:

<ul data-v-a056081e><li data-v-a056081e>asterisk 1</li><li data-v-a056081e>asterisk 2</li><li data-v-a056081e>asterisk 3


</li></ul>Asterisks loose:

<ul data-v-a056081e><li data-v-a056081e>asterisk 1
</li><li data-v-a056081e>asterisk 2
</li><li data-v-a056081e>asterisk 3

</li></ul><hr data-v-a056081e>
Pluses tight:

<ul data-v-a056081e><li data-v-a056081e>Plus 1</li><li data-v-a056081e>Plus 2</li><li data-v-a056081e>Plus 3


</li></ul>Pluses loose:

<ul data-v-a056081e><li data-v-a056081e>Plus 1
</li><li data-v-a056081e>Plus 2
</li><li data-v-a056081e>Plus 3

</li></ul><hr data-v-a056081e>

Minuses tight:

<ul data-v-a056081e><li data-v-a056081e>Minus 1</li><li data-v-a056081e>Minus 2</li><li data-v-a056081e>Minus 3


</li></ul>Minuses loose:

<ul data-v-a056081e><li data-v-a056081e>Minus 1
</li><li data-v-a056081e>Minus 2
</li><li data-v-a056081e>Minus 3


</li></ul><h2 data-v-a056081e>Ordered</h2>
Tight:

<ol data-v-a056081e><li data-v-a056081e>First</li><li data-v-a056081e>Second</li><li data-v-a056081e>Third

</li></ol>and:

<ol data-v-a056081e><li data-v-a056081e>One</li><li data-v-a056081e>Two</li><li data-v-a056081e>Three


</li></ol>Loose using tabs:

<ol data-v-a056081e><li data-v-a056081e>First
</li><li data-v-a056081e>Second
</li><li data-v-a056081e>Third

</li></ol>and using spaces:

<ol data-v-a056081e><li data-v-a056081e>One
</li><li data-v-a056081e>Two
</li><li data-v-a056081e>Three

</li></ol>Multiple paragraphs:

<ol data-v-a056081e><li data-v-a056081e>Item 1, graf one.

Item 2. graf two. The quick brown fox jumped over the lazy dog's
back.
</li><li data-v-a056081e>Item 2.
</li><li data-v-a056081e>Item 3.



</li></ol><h2 data-v-a056081e>Nested</h2>
<ul data-v-a056081e><li data-v-a056081e>Tab
<ul data-v-a056081e><li data-v-a056081e>Tab
<ul data-v-a056081e><li data-v-a056081e>Tab

</li></ul></li></ul></li></ul>Here's another:

<ol data-v-a056081e><li data-v-a056081e>First</li><li data-v-a056081e>Second:
<ul data-v-a056081e><li data-v-a056081e>Fee</li><li data-v-a056081e>Fie</li><li data-v-a056081e>Foe</li></ul></li><li data-v-a056081e>Third

</li></ol>Same thing but with paragraphs:

<ol data-v-a056081e><li data-v-a056081e>First
</li><li data-v-a056081e>Second:
<ul data-v-a056081e><li data-v-a056081e>Fee</li><li data-v-a056081e>Fie</li><li data-v-a056081e>Foe
</li></ul></li><li data-v-a056081e>Third


</li></ol>This was an error in Markdown 1.0.1:

<ul data-v-a056081e><li data-v-a056081e>this

<ul data-v-a056081e><li data-v-a056081e>sub

</li></ul>that

</li></ul>Ordered lists start from initial number:

<ol start=\\"3\\" data-v-a056081e><li data-v-a056081e>Three</li><li data-v-a056081e>Four

</li></ol>Ordered lists start from initial zero:

<ol start=\\"0\\" data-v-a056081e><li data-v-a056081e>Zero</li><li data-v-a056081e>One
</li></ol></article>"
`;

exports[`./__tests__/compiled_tests/redos_html_closing.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>&lt;tag  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;&lt;&quot; /&gt;a'a
</article>"
`;

exports[`./__tests__/compiled_tests/redos_nolink.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>![[[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[]!\\\\
</article>"
`;

exports[`./__tests__/compiled_tests/ref_paren.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><b title=\\"there\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>hi</b>

</article>"
`;

exports[`./__tests__/compiled_tests/relative_urls.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>baseUrl: &quot;<b title=\\"http
example.com\\" href=\\"http://example.com/base/&quot;\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/base/&quot;</b></h2><h1 data-v-a056081e>Absolutization of RFC 3986 URIs</h1>
<h2 data-v-a056081e>Absolute URI</h2><b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"http://example.com/logo\\" alt=\\"section 4.3\\" data-v-a056081e></b>

<h2 data-v-a056081e>Network-path reference</h2><b title=\\"
\\" href=\\"//example.com/\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"//example.com/logo\\" alt=\\"section 4.2\\" data-v-a056081e></b>

<h2 data-v-a056081e>Absolute path</h2><b title=\\"
path\\" href=\\"/path/to/content\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"/path/to/img\\" alt=\\"section 4.2\\" data-v-a056081e></b>

<h2 data-v-a056081e>Relative path</h2><b title=\\"content
\\" href=\\"content\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"img\\" alt=\\"section 4.2\\" data-v-a056081e></b>

<h2 data-v-a056081e>Dot-relative path</h2><b title=\\".
content\\" href=\\"./content\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"./img\\" alt=\\"section 3.3\\" data-v-a056081e></b>

<b title=\\"..
content\\" href=\\"../content\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"../img\\" alt=\\"section 3.3\\" data-v-a056081e></b>

<h2 data-v-a056081e>Same-document query</h2><b title=\\"
\\" href=\\"?\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"?type=image\\" alt=\\"section 4.4\\" data-v-a056081e></b>

<h2 data-v-a056081e>Same-document fragment</h2><q title=\\"
\\" data-v-a056081e><img src=\\"#img\\" alt=\\"section 4.4\\" data-v-a056081e></q>

<h2 data-v-a056081e>Empty</h2><q title=\\"
\\" data-v-a056081e>section 4.2</q>
</article>"
`;

exports[`./__tests__/compiled_tests/same_bullet.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>test</li><li data-v-a056081e>test</li><li data-v-a056081e>test
</li></ul></article>"
`;

exports[`./__tests__/compiled_tests/smartypants.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>smartypants: true</h2>Hello world 'how' &quot;are&quot; you -- today...

&quot;It's a more 'challenging' smartypants test...&quot;

'And,' as a bonus --- &quot;one
multiline&quot; test!
</article>"
`;

exports[`./__tests__/compiled_tests/strong_and_em_together.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2><strong data-v-a056081e>*This is strong and em.*</strong>

So is <strong data-v-a056081e>*this*</strong> word.

<strong data-v-a056081e>_This is strong and em._</strong>

So is <strong data-v-a056081e>_this_</strong> word.
</article>"
`;

exports[`./__tests__/compiled_tests/tabs.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2><ul data-v-a056081e><li data-v-a056081e>this is a list item
indented with tabs
</li><li data-v-a056081e>this is a list item
indented with spaces

</li></ul>Code:

    this code block is indented by one tab

And:

        this code block is indented by two tabs

And:

<ul data-v-a056081e><li data-v-a056081e>this is an example list item
indented with tabs
</li><li data-v-a056081e>this is an example list item
indented with spaces
</li></ul></article>"
`;

exports[`./__tests__/compiled_tests/tidyness.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2><blockquote data-v-a056081e>A list within a blockquote:

<ul data-v-a056081e><li data-v-a056081e>asterisk 1</li><li data-v-a056081e>asterisk 2</li><li data-v-a056081e>asterisk 3</li></ul></blockquote></article>"
`;

exports[`./__tests__/compiled_tests/toplevel_paragraphs.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: true</h2>hello world
    text after spaces
    text after spaces

paragraph before code
<pre data-v-a056081e><code data-v-a056081e>text inside block code</code></pre>
paragraph before hr
<hr data-v-a056081e>
paragraph before head with hash
<h1 data-v-a056081e>how are you</h1>
paragraph before head with equals
<h1 data-v-a056081e>how are you</h1>
paragraph before blockquote
<blockquote data-v-a056081e>text for blockquote</blockquote>
paragraph before list
<ul data-v-a056081e><li data-v-a056081e>text inside list

</li></ul>paragraph before div
&lt;div&gt;text inside div&lt;/div&gt;

paragraph with span
&lt;span&gt;text inside span&lt;/span&gt;

hello <b title=\\"
are\\" href=\\"/are/you\\" chk=\\"confirm\\" data-v-a056081e>world</b>


&lt;div&gt;hello&lt;/div&gt;

&lt;span&gt;hello&lt;/span&gt;
</article>"
`;

exports[`./__tests__/compiled_tests/tricky_list.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><strong data-v-a056081e>hello</strong> _world_

<ul data-v-a056081e><li data-v-a056081e>hello world

</li></ul><strong data-v-a056081e>hello</strong> _world_

<ul data-v-a056081e><li data-v-a056081e>hello world

</li></ul><strong data-v-a056081e>hello</strong> _world_

<ul data-v-a056081e><li data-v-a056081e>Hello world

</li></ul><strong data-v-a056081e>hello</strong> _world_

<ul data-v-a056081e><li data-v-a056081e>hello world
</li></ul></article>"
`;

exports[`./__tests__/compiled_tests/uppercase_hex.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>sanitize: true</h2>lowerclick melower
upperclick meupper
</article>"
`;

exports[`./__tests__/new/autolink_lines.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>hello world
<b title=\\"http
example.com\\" href=\\"http://example.com\\" chk=\\"confirm\\" data-v-a056081e>http://example.com</b>
</article>"
`;

exports[`./__tests__/new/blockquote_list_item.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>This fails in markdown.pl and upskirt:

<ul data-v-a056081e><li data-v-a056081e>hello
<blockquote data-v-a056081e>world</blockquote></li></ul></article>"
`;

exports[`./__tests__/new/case_insensitive_refs.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>hi</b>

</article>"
`;

exports[`./__tests__/new/cm_autolinks.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>gfm: false
<h2 data-v-a056081e>mangle: false</h2>
Here are some valid autolinks:

<h3 data-v-a056081e>Example 565</h3>
<b title=\\"http
foo.bar.baz\\" href=\\"http://foo.bar.baz\\" chk=\\"confirm\\" data-v-a056081e>http://foo.bar.baz</b>

<h3 data-v-a056081e>Example 566</h3>
<b title=\\"http
foo.bar.baz\\" href=\\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\\" chk=\\"confirm\\" data-v-a056081e>http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</b>

<h3 data-v-a056081e>Example 567</h3>
<b title=\\"irc
foo.bar:2233\\" href=\\"irc://foo.bar:2233/baz\\" chk=\\"confirm\\" data-v-a056081e>irc://foo.bar:2233/baz</b>

<h3 data-v-a056081e>Example 568</h3>
Uppercase is also fine:

<b title=\\"MAILTO:FOO@BAR.BAZ
\\" href=\\"MAILTO:FOO@BAR.BAZ\\" chk=\\"confirm\\" data-v-a056081e>MAILTO:FOO@BAR.BAZ</b>

Note that many strings that count as absolute URIs for purposes of this spec are not valid URIs, because their schemes are not registered or because of other problems with their syntax:

<h3 data-v-a056081e>Example 569</h3>
<b title=\\"a+b+c:d
\\" href=\\"a+b+c:d\\" chk=\\"confirm\\" data-v-a056081e>a+b+c:d</b>

<h3 data-v-a056081e>Example 570</h3>
<b title=\\"made-up-scheme
foo,bar\\" href=\\"made-up-scheme://foo,bar\\" chk=\\"confirm\\" data-v-a056081e>made-up-scheme://foo,bar</b>

<h3 data-v-a056081e>Example 571</h3>
<b title=\\"http
..\\" href=\\"http://../\\" chk=\\"confirm\\" data-v-a056081e>http://../</b>

<h3 data-v-a056081e>Example 572</h3>
<b title=\\"localhost:5001
foo\\" href=\\"localhost:5001/foo\\" chk=\\"confirm\\" data-v-a056081e>localhost:5001/foo</b>

<h3 data-v-a056081e>Example 573</h3>
Spaces are not allowed in autolinks:

&lt;<b title=\\"http
foo.bar\\" href=\\"http://foo.bar/baz\\" chk=\\"confirm\\" data-v-a056081e>http://foo.bar/baz</b> bim&gt;

<h3 data-v-a056081e>Example 574</h3>
Backslash-escapes do not work inside autolinks:

<b title=\\"http
example.com\\" href=\\"http://example.com/\\\\[\\\\\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/\\\\[\\\\</b>

Examples of email autolinks:

<h3 data-v-a056081e>Example 575</h3>
<b title=\\"mailto:foo@bar.example.com
\\" href=\\"mailto:foo@bar.example.com\\" chk=\\"confirm\\" data-v-a056081e>foo@bar.example.com</b>

<h3 data-v-a056081e>Example 576</h3>
<b title=\\"mailto:foo+special@Bar.baz-bar0.com
\\" href=\\"mailto:foo+special@Bar.baz-bar0.com\\" chk=\\"confirm\\" data-v-a056081e>foo+special@Bar.baz-bar0.com</b>

<h3 data-v-a056081e>Example 577</h3>
Backslash-escapes do not work inside email autolinks:

&lt;foo+@bar.example.com&gt;

These are not autolinks:

<h3 data-v-a056081e>Example 578</h3>
&lt;&gt;

<h3 data-v-a056081e>Example 579</h3>
&lt; <b title=\\"http
foo.bar\\" href=\\"http://foo.bar\\" chk=\\"confirm\\" data-v-a056081e>http://foo.bar</b> &gt;

<h3 data-v-a056081e>Example 580</h3>
&lt;m:abc&gt;

<h3 data-v-a056081e>Example 581</h3>
&lt;foo.bar.baz&gt;

<h3 data-v-a056081e>Example 582</h3>
<b title=\\"http
example.com\\" href=\\"http://example.com\\" chk=\\"confirm\\" data-v-a056081e>http://example.com</b>

<h3 data-v-a056081e>Example 583</h3>
<b title=\\"mailto:foo@bar.example.com
\\" href=\\"mailto:foo@bar.example.com\\" chk=\\"confirm\\" data-v-a056081e>foo@bar.example.com</b></article>"
`;

exports[`./__tests__/new/cm_blockquotes.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h3 data-v-a056081e>Example 191</h3>
<blockquote data-v-a056081e><h1 data-v-a056081e>Foo</h1>bar
baz</blockquote>
<h3 data-v-a056081e>Example 192</h3>
The spaces after the <code data-v-a056081e>&gt;</code> characters can be omitted:

<blockquote data-v-a056081e><h1 data-v-a056081e>Foo</h1>bar
baz</blockquote>
<h3 data-v-a056081e>Example 193</h3>
The <code data-v-a056081e>&gt;</code> characters can be indented 1-3 spaces:

<blockquote data-v-a056081e><h1 data-v-a056081e>Foo</h1>bar
baz</blockquote>
<h3 data-v-a056081e>Example 194</h3>
Four spaces gives us a code block:

    &gt; # Foo
    &gt; bar
    &gt; baz

<h3 data-v-a056081e>Example 195</h3>
The Laziness clause allows us to omit the <code data-v-a056081e>&gt;</code> before paragraph continuation text:

<blockquote data-v-a056081e><h1 data-v-a056081e>Foo</h1>bar
baz</blockquote>
<h3 data-v-a056081e>Example 196</h3>
A block quote can contain some lazy and some non-lazy continuation lines:

<blockquote data-v-a056081e>bar
baz
foo</blockquote>
<h3 data-v-a056081e>Example 197</h3>
Laziness only applies to lines that would have been continuations of paragraphs had they been prepended with block quote markers. For example, the <code data-v-a056081e>&gt;</code> cannot be omitted in the second line of

<blockquote data-v-a056081e>foo</blockquote><hr data-v-a056081e>
without changing the meaning.

<h3 data-v-a056081e>Example 198</h3>
    Similarly, if we omit the <code data-v-a056081e>&gt;</code> in the second line then the block quote ends after the first line:

    &gt; - foo
<ul data-v-a056081e><li data-v-a056081e>bar

</li></ul><h3 data-v-a056081e>Example 199</h3>
For the same reason, we can’t omit the <code data-v-a056081e>&gt;</code> in front of subsequent lines of an indented or fenced code block:

<blockquote data-v-a056081e>    foo</blockquote>
    bar

<h3 data-v-a056081e>Example 200</h3>
    &gt; <code data-v-a056081e>foo</code>

    &lt;blockquote&gt;
    &lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;foo&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

<h3 data-v-a056081e>Example 201</h3>
    &gt; foo
<ul data-v-a056081e><li data-v-a056081e>bar

&lt;blockquote&gt;
&lt;p&gt;foo
- bar&lt;/p&gt;
&lt;/blockquote&gt;

</li></ul><h3 data-v-a056081e>Example 202</h3>
A block quote can be empty:

<blockquote data-v-a056081e></blockquote>
<h3 data-v-a056081e>Example 203</h3>
<blockquote data-v-a056081e>
 
</blockquote>
<h3 data-v-a056081e>Example 204</h3>
A block quote can have initial or final blank lines:

<blockquote data-v-a056081e>
foo
 </blockquote>
<h3 data-v-a056081e>Example 205</h3>
A blank line always separates block quotes:

<blockquote data-v-a056081e>foo</blockquote>
<blockquote data-v-a056081e>bar</blockquote>
<h3 data-v-a056081e>Example 206</h3>
Consecutiveness means that if we put these block quotes together, we get a single block quote:

<blockquote data-v-a056081e>foo
bar</blockquote>
<h3 data-v-a056081e>Example 207</h3>
To get a block quote with two paragraphs, use:

<blockquote data-v-a056081e>foo

bar</blockquote>
<h3 data-v-a056081e>Example 208</h3>
Block quotes can interrupt paragraphs:

foo
<blockquote data-v-a056081e>bar</blockquote>
<h3 data-v-a056081e>Example 209</h3>
In general, blank lines are not needed before or after block quotes:

<blockquote data-v-a056081e>aaa</blockquote><hr data-v-a056081e><blockquote data-v-a056081e>bbb</blockquote>
<h3 data-v-a056081e>Example 210</h3>
However, because of laziness, a blank line is needed between a block quote and a following paragraph:

<blockquote data-v-a056081e>bar
baz</blockquote>
<h3 data-v-a056081e>Example 211</h3>
<blockquote data-v-a056081e>bar</blockquote>
baz

<h3 data-v-a056081e>Example 212</h3>
<blockquote data-v-a056081e>bar
</blockquote>baz

<h3 data-v-a056081e>Example 213</h3>
It is a consequence of the Laziness rule that any number of initial <code data-v-a056081e>&gt;</code>s may be omitted on a continuation line of a nested block quote:

<blockquote data-v-a056081e><blockquote data-v-a056081e><blockquote data-v-a056081e>foo
bar</blockquote></blockquote></blockquote>
<h3 data-v-a056081e>Example 214</h3>
<blockquote data-v-a056081e><blockquote data-v-a056081e><blockquote data-v-a056081e>foo
bar
baz</blockquote></blockquote></blockquote>
<h3 data-v-a056081e>Example 215</h3>
When including an indented code block in a block quote, remember that the block quote marker includes both the <code data-v-a056081e>&gt;</code> and a following space. So five spaces are needed after the <code data-v-a056081e>&gt;</code>:

<blockquote data-v-a056081e>    code</blockquote>
<blockquote data-v-a056081e>   not code</blockquote></article>"
`;

exports[`./__tests__/new/cm_html_blocks.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h1 data-v-a056081e>HTML blocks</h1>
<h3 data-v-a056081e>Example 116</h3>
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
&lt;pre&gt;
<strong data-v-a056081e>Hello</strong>,

_world_.
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

<h3 data-v-a056081e>Example 117</h3>
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
           hi
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

okay.

<h3 data-v-a056081e>Example 118</h3>
 &lt;div&gt;
  *hello*
         &lt;foo&gt;&lt;a&gt;

<h3 data-v-a056081e>Example 119</h3>
&lt;/div&gt;
*foo*

<h3 data-v-a056081e>Example 120</h3>
&lt;DIV CLASS=&quot;foo&quot;&gt;

*Markdown*

&lt;/DIV&gt;

<h3 data-v-a056081e>Example 121</h3>
&lt;div id=&quot;foo&quot;
  class=&quot;bar&quot;&gt;
&lt;/div&gt;

<h3 data-v-a056081e>Example 122</h3>
&lt;div id=&quot;foo&quot; class=&quot;bar
  baz&quot;&gt;
&lt;/div&gt;

<h3 data-v-a056081e>Example 123</h3>
&lt;div&gt;
*foo*

*bar*

<h3 data-v-a056081e>Example 124</h3>
&lt;div id=&quot;foo&quot;
*hi*

<h3 data-v-a056081e>Example 125</h3>
&lt;div class
foo

<h3 data-v-a056081e>Example 126</h3>
&lt;div *???-&amp;&amp;&amp;-&lt;---
*foo*

<h3 data-v-a056081e>Example 127</h3>
&lt;div&gt;&lt;a href=&quot;bar&quot;&gt;*foo*&lt;/a&gt;&lt;/div&gt;

<h3 data-v-a056081e>Example 128</h3>
&lt;table&gt;&lt;tr&gt;&lt;td&gt;
foo
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

<h3 data-v-a056081e>Example 129</h3>
&lt;div&gt;&lt;/div&gt;
<code data-v-a056081e>c
int x = 33;</code>

<h3 data-v-a056081e>Example 130</h3>
&lt;a href=&quot;foo&quot;&gt;
*bar*
&lt;/a&gt;

<h3 data-v-a056081e>Example 131</h3>
&lt;Warning&gt;
*bar*
&lt;/Warning&gt;

<h3 data-v-a056081e>Example 132</h3>
&lt;i class=&quot;foo&quot;&gt;
*bar*
&lt;/i&gt;

<h3 data-v-a056081e>Example 133</h3>
&lt;/ins&gt;
*bar*

<h3 data-v-a056081e>Example 134</h3>
&lt;del&gt;
*foo*
&lt;/del&gt;

<h3 data-v-a056081e>Example 135</h3>
&lt;del&gt;

*foo*

&lt;/del&gt;

<h3 data-v-a056081e>Example 136</h3>
&lt;del&gt;*foo*&lt;/del&gt;

<h3 data-v-a056081e>Example 137</h3>
&lt;pre language=&quot;haskell&quot;&gt;&lt;code&gt;
import Text.HTML.TagSoup

main :: IO ()
main = print $ parseTags tags
&lt;/code&gt;&lt;/pre&gt;
okay

<h3 data-v-a056081e>Example 138</h3>
&lt;script type=&quot;text/javascript&quot;&gt;
// JavaScript example

document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;;
&lt;/script&gt;
okay

<h3 data-v-a056081e>Example 139</h3>
&lt;style
  type=&quot;text/css&quot;&gt;
h1 {color:red;}

p {color:blue;}
&lt;/style&gt;
okay

<h3 data-v-a056081e>Example 141</h3>
<blockquote data-v-a056081e>&lt;div&gt;
foo</blockquote>
bar

<h3 data-v-a056081e>Example 142</h3>
<ul data-v-a056081e><li data-v-a056081e>&lt;div&gt;</li><li data-v-a056081e>foo

</li></ul><h3 data-v-a056081e>Example 143</h3>
&lt;style&gt;p{color:red;}&lt;/style&gt;
*foo*

<h3 data-v-a056081e>Example 144</h3>
&lt;!-- foo --&gt;*bar*
*baz*

<h3 data-v-a056081e>Example 145</h3>
&lt;script&gt;
foo
&lt;/script&gt;1. *bar*

<h3 data-v-a056081e>Example 146</h3>
&lt;!-- Foo

bar
   baz --&gt;
okay

<h3 data-v-a056081e>Example 147</h3>
&lt;?php

  echo '&gt;';

?&gt;
okay

<h3 data-v-a056081e>Example 148</h3>
&lt;!DOCTYPE html&gt;

<h3 data-v-a056081e>Example 149</h3>
&lt;![CDATA[
function matchwo(a,b)
{
  if (a &lt; b &amp;&amp; a &lt; 0) then {
    return 1;

  } else {

    return 0;
  }
}
]]&gt;
okay

<h3 data-v-a056081e>Example 150</h3>
  &lt;!-- foo --&gt;

    &lt;!-- foo --&gt;

<h3 data-v-a056081e>Example 151</h3>
  &lt;div&gt;

    &lt;div&gt;

<h3 data-v-a056081e>Example 152</h3>
Foo
&lt;div&gt;
bar
&lt;/div&gt;

<h3 data-v-a056081e>Example 153</h3>
&lt;div&gt;
bar
&lt;/div&gt;
*foo*

<h3 data-v-a056081e>Example 154</h3>
Foo
&lt;a href=&quot;bar&quot;&gt;
baz

<h3 data-v-a056081e>Example 155</h3>
&lt;div&gt;

*Emphasized* text.

&lt;/div&gt;

<h3 data-v-a056081e>Example 156</h3>
&lt;div&gt;
*Emphasized* text.
&lt;/div&gt;

<h3 data-v-a056081e>Example 157</h3>
&lt;table&gt;

&lt;tr&gt;

&lt;td&gt;
Hi
&lt;/td&gt;

&lt;/tr&gt;

&lt;/table&gt;

<h3 data-v-a056081e>Example 158</h3>
&lt;table&gt;

  &lt;tr&gt;

    &lt;td&gt;
      Hi
    &lt;/td&gt;

  &lt;/tr&gt;

&lt;/table&gt;

<h3 data-v-a056081e>Example 140</h3>
If there is no matching end tag, the block will end at the end of the document (or the enclosing block quote or list item):

&lt;style
  type=&quot;text/css&quot;&gt;

foo</article>"
`;

exports[`./__tests__/new/cm_link_defs.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h3 data-v-a056081e>Example 159</h3>

<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo159</b>

<h3 data-v-a056081e>Example 160</h3>

<b title=\\"the title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo160</b>

<h3 data-v-a056081e>Example 161</h3>

<b title=\\"title (with parens)\\" href=\\"my_(url)\\" chk=\\"confirm\\" data-v-a056081e>Foo161*bar]</b>

<h3 data-v-a056081e>Example 162</h3>

<b title=\\"title\\" href=\\"my%20url\\" chk=\\"confirm\\" data-v-a056081e>Foo162 bar</b>

<h3 data-v-a056081e>Example 163</h3>

<b title=\\"
title
line1
line2
\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo163</b>

<h3 data-v-a056081e>Example 164</h3>
[foo164]: /url 'title

with blank line'

[foo164]

<h3 data-v-a056081e>Example 165</h3>

<b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo165</b>

<h3 data-v-a056081e>Example 166</h3>
[foo166]:

[foo166]

<h3 data-v-a056081e>Example 167</h3>
    [foo167]: /url\\\\bar*baz &quot;foo&quot;bar\\\\baz&quot;

    [foo167]

    should render to

    &lt;p&gt;&lt;a href=&quot;/url%5Cbar*baz&quot; title=&quot;foo&amp;quot;bar\\\\baz&quot;&gt;foo167&lt;/a&gt;&lt;/p&gt;

<h3 data-v-a056081e>Example 168</h3>
<b title=\\"url
\\" href=\\"url\\" chk=\\"confirm\\" data-v-a056081e>foo168</b>


<h3 data-v-a056081e>Example 169</h3>
<b title=\\"first
\\" href=\\"first\\" chk=\\"confirm\\" data-v-a056081e>foo169</b>


<h3 data-v-a056081e>Example 170</h3>

<b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>Foo170</b>

<h3 data-v-a056081e>Example 171</h3>

<b title=\\"
φου\\" href=\\"/φου\\" chk=\\"confirm\\" data-v-a056081e>αγω</b>

<h3 data-v-a056081e>Example 172</h3>

<h3 data-v-a056081e>Example 173</h3>
bar

<h3 data-v-a056081e>Example 174</h3>
[foo174]: /url &quot;title&quot; ok

<h3 data-v-a056081e>Example 175</h3>
&quot;title&quot; ok

<h3 data-v-a056081e>Example 176</h3>
    [foo176]: /url &quot;title&quot;

[foo176]

<h3 data-v-a056081e>Example 177</h3>
<pre data-v-a056081e><code data-v-a056081e>[foo177]: /url</code></pre>
[foo177]

<h3 data-v-a056081e>Example 178</h3>
Foo
[bar178]: /baz

[bar178]

<h3 data-v-a056081e>Example 179</h3>
<h1 data-v-a056081e><b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>Foo179</b></h1><blockquote data-v-a056081e>bar</blockquote>
<h3 data-v-a056081e>Example 180</h3>

<b title=\\"foo\\" href=\\"/foo-url\\" chk=\\"confirm\\" data-v-a056081e>foo180</b>,
<b title=\\"bar\\" href=\\"/bar-url\\" chk=\\"confirm\\" data-v-a056081e>bar180</b>,
<b title=\\"
baz-url\\" href=\\"/baz-url\\" chk=\\"confirm\\" data-v-a056081e>baz180</b>

<h3 data-v-a056081e>Example 181</h3>
[foo181]

<blockquote data-v-a056081e>[foo181]: /url</blockquote></article>"
`;

exports[`./__tests__/new/cm_links.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>xhtml: true</h2>
<h1 data-v-a056081e>Links</h1>
<h3 data-v-a056081e>Example 459</h3>
<b title=\\"title\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 460</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 461</h3>
<q title=\\"
\\" data-v-a056081e>link</q>

<h3 data-v-a056081e>Example 462</h3>
<q title=\\"
\\" data-v-a056081e>link</q>

<h3 data-v-a056081e>Example 463</h3>
[link](/my uri)

<h3 data-v-a056081e>Example 464</h3>
[link](&lt;/my uri&gt;)

<h3 data-v-a056081e>Example 465</h3>
[link](foo
bar)

<h3 data-v-a056081e>Example 466</h3>
[link](&lt;foo
bar&gt;)

<h3 data-v-a056081e>Example 467</h3>
<b title=\\"(foo)
\\" href=\\"(foo)\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 4680</h3>
ONE LEVEL of parentheses are allowed without escaping, as long as they are balanced:

<b title=\\"foo(bar)
\\" href=\\"foo(bar)\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 469</h3>
<b title=\\"foo(and(bar)
\\" href=\\"foo(and(bar)\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 470</h3>
However, if you have ANY unbalanced parentheses, you need to escape or use the &lt;...&gt; form:

<b title=\\"foo(and(bar)
\\" href=\\"foo(and(bar)\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 471</h3>
<b title=\\"foo):
\\" href=\\"foo):\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 472</h3>
<b title=\\"
fragment\\" href=\\"#fragment\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<b title=\\"http
example.com\\" href=\\"http://example.com#fragment\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<b title=\\"http
example.com\\" href=\\"http://example.com?foo=3#frag\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 473</h3>
<b title=\\"foo\\\\bar
\\" href=\\"foo\\\\bar\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 4740</h3>
<b title=\\"foo%20b&amp;auml;
\\" href=\\"foo%20b&amp;auml;\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 475</h3>
<b title=\\"&quot;title&quot;
\\" href=\\"&quot;title&quot;\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 476</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>link</b>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>link</b>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 477</h3>
<b title=\\"title &quot;&amp;quot;\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 479</h3>
[link](/url &quot;title &quot;and&quot; title&quot;)

<h3 data-v-a056081e>Example 480</h3>
<b title=\\"title &quot;and&quot; title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 481</h3>
<b title=\\"title\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link</b>

<h3 data-v-a056081e>Example 482</h3>
[link] (/uri)

<h3 data-v-a056081e>Example 4830</h3>
The link text may contain ONE LEVEL of balanced brackets, but not unbalanced ones, unless they are escaped:

<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link [foo4830]</b>

<h3 data-v-a056081e>Example 484</h3>
[link] bar](/uri)

<h3 data-v-a056081e>Example 485</h3>
[link <b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>bar</b>

<h3 data-v-a056081e>Example 486</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link [bar</b>

<h3 data-v-a056081e>Example 487</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link *foo <strong data-v-a056081e>bar</strong> <code data-v-a056081e>#</code>*</b>

<h3 data-v-a056081e>Example 488</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"moon.jpg\\" alt=\\"moon\\" data-v-a056081e></b>

<h3 data-v-a056081e>Example 493</h3>
<b title=\\"baz*
\\" href=\\"baz*\\" chk=\\"confirm\\" data-v-a056081e>foo *bar</b>

<h3 data-v-a056081e>Example 494</h3>
*foo [bar* baz]

<h3 data-v-a056081e>Example 498</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo</b>


<h3 data-v-a056081e>Example 4990</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link [foo499]</b>


<h3 data-v-a056081e>Example 500</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link [bar</b>


<h3 data-v-a056081e>Example 501</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>link *foo <strong data-v-a056081e>bar</strong> <code data-v-a056081e>#</code>*</b>


<h3 data-v-a056081e>Example 502</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"moon.jpg\\" alt=\\"moon\\" data-v-a056081e></b>


<h3 data-v-a056081e>Example 5030</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>foo <b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>bar</b></b>


<h3 data-v-a056081e>Example 504</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>foo *bar <b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>baz</b>*</b>


<h3 data-v-a056081e>Example 506</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>foo *bar</b>


<h3 data-v-a056081e>Example 510</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo</b>


<h3 data-v-a056081e>Example 511</h3>
<b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>Толпой</b> is a Russian word.


<h3 data-v-a056081e>Example 512</h3>

[Baz][Foo bar]

<h3 data-v-a056081e>Example 513</h3>
[foo513] <b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>bar513</b>


<h3 data-v-a056081e>Example 514</h3>
[foo514]
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>bar514</b>


<h3 data-v-a056081e>Example 515</h3>


<b title=\\"
url1\\" href=\\"/url1\\" chk=\\"confirm\\" data-v-a056081e>bar</b>

<h3 data-v-a056081e>Example 516</h3>
[bar][foo!516]


<h3 data-v-a056081e>Example 517</h3>
[foo517][ref[517]

[ref[517]: /uri

<h3 data-v-a056081e>Example 518</h3>
[foo518][ref[bar518]518]

[ref[bar518]518]: /uri

<h3 data-v-a056081e>Example 519</h3>
<kbd data-v-a056081e>[foo519]</kbd>

<kbd data-v-a056081e>[foo519]</kbd>: /url

<h3 data-v-a056081e>Example 520</h3>
<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>foo</b>


<h3 data-v-a056081e>Example 521</h3>

<b title=\\"
uri\\" href=\\"/uri\\" chk=\\"confirm\\" data-v-a056081e>bar\\\\</b>

<h3 data-v-a056081e>Example 522</h3>
[]

[]: /uri

<h3 data-v-a056081e>Example 523</h3>
[
 ]

[
 ]: /uri

<h3 data-v-a056081e>Example 524</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo</b>


<h3 data-v-a056081e>Example 525</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>*foo* bar</b>


<h3 data-v-a056081e>Example 526</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>Foo</b>


<h3 data-v-a056081e>Example 527</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo</b>
[]


<h3 data-v-a056081e>Example 528</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo</b>


<h3 data-v-a056081e>Example 529</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>*foo* bar</b>


<h3 data-v-a056081e>Example 530</h3>
<kbd data-v-a056081e>*foo* bar</kbd>


<h3 data-v-a056081e>Example 531</h3>
[[bar <b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo531</b>


<h3 data-v-a056081e>Example 532</h3>
<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>Foo</b>


<h3 data-v-a056081e>Example 533</h3>
<b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo533</b> bar


<h3 data-v-a056081e>Example 534</h3>
[foo]


<h3 data-v-a056081e>Example 536</h3>
<b title=\\"
url2\\" href=\\"/url2\\" chk=\\"confirm\\" data-v-a056081e>foo536</b>


<h3 data-v-a056081e>Example 537</h3>
<b title=\\"
url1\\" href=\\"/url1\\" chk=\\"confirm\\" data-v-a056081e>foo537</b>


<h3 data-v-a056081e>Example 538</h3>
<q title=\\"
\\" data-v-a056081e>foo538</q>


<h3 data-v-a056081e>Example 539</h3>
<b title=\\"
url1\\" href=\\"/url1\\" chk=\\"confirm\\" data-v-a056081e>foo539</b>(not a link)


<h3 data-v-a056081e>Example 540</h3>
[foo540]<b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>bar540</b>


<h3 data-v-a056081e>Example 541</h3>
<b title=\\"
url2\\" href=\\"/url2\\" chk=\\"confirm\\" data-v-a056081e>foo541</b><b title=\\"
url1\\" href=\\"/url1\\" chk=\\"confirm\\" data-v-a056081e>baz541</b>


<h3 data-v-a056081e>Example 542</h3>
[foo542]<b title=\\"
url1\\" href=\\"/url1\\" chk=\\"confirm\\" data-v-a056081e>bar542</b>


<h3 data-v-a056081e>Example 543</h3>
<img src=\\"/url\\" alt=\\"foo543\\" title=\\"title\\" data-v-a056081e>

<h3 data-v-a056081e>Example 5440</h3>
<img src=\\"train.jpg\\" alt=\\"foo ,*bar,*544\\" title=\\"train &amp; tracks\\" data-v-a056081e>


<h3 data-v-a056081e>Example 5450</h3>
<img src=\\"/url2\\" alt=\\"foo ![bar](/url)\\" data-v-a056081e>

<h3 data-v-a056081e>Example 5460</h3>
<img src=\\"/url2\\" alt=\\"foo [bar](/url)\\" data-v-a056081e>

<h3 data-v-a056081e>Example 5470</h3>
<img src=\\"train.jpg\\" alt=\\"foo ,*bar,*547\\" title=\\"train &amp; tracks\\" data-v-a056081e>


<h3 data-v-a056081e>Example 5480</h3>
<img src=\\"train.jpg\\" alt=\\"foo ,*bar,*\\" title=\\"train &amp; tracks\\" data-v-a056081e>


<h3 data-v-a056081e>Example 549</h3>
<img src=\\"train.jpg\\" alt=\\"foo\\" data-v-a056081e>

<h3 data-v-a056081e>Example 550</h3>
My <img src=\\"/path/to/train.jpg\\" alt=\\"foo bar\\" title=\\"title\\" data-v-a056081e>

<h3 data-v-a056081e>Example 551</h3>
<img src=\\"url\\" alt=\\"foo\\" data-v-a056081e>

<h3 data-v-a056081e>Example 552</h3>
<img src=\\"/url\\" alt=\\"\\" data-v-a056081e>

<h3 data-v-a056081e>Example 553</h3>
<img src=\\"/url\\" alt=\\"foo\\" data-v-a056081e>


<h3 data-v-a056081e>Example 554</h3>
<img src=\\"/url\\" alt=\\"foo\\" data-v-a056081e>


<h3 data-v-a056081e>Example 555</h3>
<img src=\\"/url\\" alt=\\"foo\\" title=\\"title\\" data-v-a056081e>


<h3 data-v-a056081e>Example 5560</h3>
<img src=\\"/url\\" alt=\\"*foo,* bar\\" title=\\"title\\" data-v-a056081e>


<h3 data-v-a056081e>Example 557</h3>
<img src=\\"/url\\" alt=\\"Foo\\" title=\\"title\\" data-v-a056081e>


<h3 data-v-a056081e>Example 558</h3>
<img src=\\"/url\\" alt=\\"foo\\" title=\\"title\\" data-v-a056081e>
[]


<h3 data-v-a056081e>Example 559</h3>
<img src=\\"/url\\" alt=\\"foo\\" title=\\"title\\" data-v-a056081e>


<h3 data-v-a056081e>Example 5600</h3>
<img src=\\"/url\\" alt=\\"*foo,* bar\\" title=\\"title\\" data-v-a056081e>


<h3 data-v-a056081e>Example 561</h3>
!<kbd data-v-a056081e>foo561</kbd>

<kbd data-v-a056081e>foo561</kbd>: /url &quot;title&quot;

<h3 data-v-a056081e>Example 562</h3>
<img src=\\"/url\\" alt=\\"Foo\\" title=\\"title\\" data-v-a056081e>


<h3 data-v-a056081e>Example 563</h3>
![foo]


<h3 data-v-a056081e>Example 564</h3>
!<b title=\\"title\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>foo</b>


</article>"
`;

exports[`./__tests__/new/cm_raw_html.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h1 data-v-a056081e>Raw HTML</h1>
<h3 data-v-a056081e>Example 584</h3>
&lt;a&gt;&lt;bab&gt;&lt;c2c&gt;

<h3 data-v-a056081e>Example 585</h3>
&lt;a/&gt;&lt;b2/&gt;

<h3 data-v-a056081e>Example 586</h3>
&lt;a  /&gt;&lt;b2
data=&quot;foo&quot; &gt;

<h3 data-v-a056081e>Example 587</h3>
&lt;a foo=&quot;bar&quot; bam = 'baz &lt;em&gt;&quot;&lt;/em&gt;'
_boolean zoop:33=zoop:33 /&gt;

<h3 data-v-a056081e>Example 588</h3>
Foo &lt;responsive-image src=&quot;foo.jpg&quot; /&gt;

<h3 data-v-a056081e>Example 589</h3>
&lt;33&gt; &lt;__&gt;

<h3 data-v-a056081e>Example 590</h3>
&lt;a h*#ref=&quot;hi&quot;&gt;

<h3 data-v-a056081e>Example 591</h3>
&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;

<h3 data-v-a056081e>Example 592</h3>
&lt; a&gt;&lt;
foo&gt;&lt;bar/ &gt;

<h3 data-v-a056081e>Example 593</h3>
&lt;a href='bar'title=title&gt;

<h3 data-v-a056081e>Example 594</h3>
&lt;/a&gt;&lt;/foo &gt;

<h3 data-v-a056081e>Example 595</h3>
&lt;/a href=&quot;foo&quot;&gt;

<h3 data-v-a056081e>Example 596</h3>
foo &lt;!-- this is a
comment - with hyphen --&gt;

<h3 data-v-a056081e>Example 599</h3>
foo &lt;?php echo $a; ?&gt;

<h3 data-v-a056081e>Example 600</h3>
foo &lt;!ELEMENT br EMPTY&gt;

<h3 data-v-a056081e>Example 601</h3>
foo &lt;![CDATA[&gt;&amp;&lt;]]&gt;

<h3 data-v-a056081e>Example 602</h3>
foo &lt;a href=&quot;&amp;ouml;&quot;&gt;

<h3 data-v-a056081e>Example 603</h3>
foo &lt;a href=&quot;\\\\*&quot;&gt;
</article>"
`;

exports[`./__tests__/new/cm_thematic_breaks.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h1 data-v-a056081e>Thematic breaks</h1>
<h3 data-v-a056081e>Example 13</h3>
<hr data-v-a056081e><hr data-v-a056081e><hr data-v-a056081e>
<h3 data-v-a056081e>Example 14</h3>
+++

<h3 data-v-a056081e>Example 15</h3>
===

<h3 data-v-a056081e>Example 16</h3>
--
**
__

<h3 data-v-a056081e>Example 17</h3>
<hr data-v-a056081e><hr data-v-a056081e><hr data-v-a056081e>
<h3 data-v-a056081e>Example 18</h3>
    ***

<h3 data-v-a056081e>Example 19</h3>
Foo
    ***

<h3 data-v-a056081e>Example 20</h3>
<hr data-v-a056081e>
<h3 data-v-a056081e>Example 21</h3>
<hr data-v-a056081e>
<h3 data-v-a056081e>Example 22</h3>
<hr data-v-a056081e>
<h3 data-v-a056081e>Example 23</h3>
<hr data-v-a056081e>
<h3 data-v-a056081e>Example 24</h3>
<hr data-v-a056081e>
<h3 data-v-a056081e>Example 25</h3>
_ _ _ _ a

a------

-<s data-v-a056081e>a-</s>

<h3 data-v-a056081e>Example 26</h3>
 *-*

<h3 data-v-a056081e>Example 27</h3>
<ul data-v-a056081e><li data-v-a056081e>foo
</li></ul><hr data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>bar

</li></ul><h3 data-v-a056081e>Example 28</h3>
Foo
<hr data-v-a056081e>bar

<h3 data-v-a056081e>Example 29</h3>
<h2 data-v-a056081e>Foo</h2>bar

<h3 data-v-a056081e>Example 30</h3>
<ul data-v-a056081e><li data-v-a056081e>Foo
</li></ul><hr data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>Bar

</li></ul><h3 data-v-a056081e>Example 31</h3>
<ul data-v-a056081e><li data-v-a056081e>Foo</li><li data-v-a056081e><hr data-v-a056081e></li></ul></article>"
`;

exports[`./__tests__/new/def_blocks.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><blockquote data-v-a056081e>hello
[1]: hello</blockquote>
<hr data-v-a056081e>
<blockquote data-v-a056081e>hello
[2]: hello</blockquote>

<ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>[3]: hello


</li></ul><ul data-v-a056081e><li data-v-a056081e>hello
</li></ul>

<blockquote data-v-a056081e>foo
bar
[5]: foo
bar</blockquote></article>"
`;

exports[`./__tests__/new/double_link.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>&lt;p&gt;Already linked: &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;.&lt;/p&gt;

Already linked: <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>.

Already linked: &lt;a href=&quot;http://example.com/&quot;&gt;<strong data-v-a056081e>http://example.com/</strong>&lt;/a&gt;.
</article>"
`;

exports[`./__tests__/new/em_2char.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>_123_

*123*

_12_

*12*

_1_

*1*

__

**

_123 _

*123 *

_ 123_

_1__

*1**
</article>"
`;

exports[`./__tests__/new/escaped_angles.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>&gt;
</article>"
`;

exports[`./__tests__/new/gfm_autolinks.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>link with . <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>.

link with ! <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>!

link with : <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>:

link with , <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>,

link with ; <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>;

link with ) <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>)

link with nothing <b title=\\"http
example.com\\" href=\\"http://example.com/hello-world\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/hello-world</b>

<h3 data-v-a056081e>Example 597</h3>
The scheme http will be inserted automatically:

<b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org</b>

<h3 data-v-a056081e>Example 598</h3>
After a valid domain, zero or more non-space non-&lt; characters may follow:

Visit <b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org/help\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org/help</b> for more information.

<h3 data-v-a056081e>Example 599</h3>
Trailing punctuation (specifically, ?, !, ., ,, :, *, _, and ~) will not be considered part of the autolink, though they may be included in the interior of the link:

Visit <b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org</b>.

Visit <b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org/a.b\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org/a.b</b>.

<h3 data-v-a056081e>Example 600</h3>
<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=Markup+(business)\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=Markup+(business)</b>

(<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=Markup+(business)\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=Markup+(business)</b>)

<h3 data-v-a056081e>Example 601</h3>
<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=(business))+ok\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=(business))+ok</b>

<h3 data-v-a056081e>Example 602</h3>
<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=commonmark&amp;hl=en\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=commonmark&amp;hl=en</b>

<b title=\\"http
www.google.com\\" href=\\"http://www.google.com/search?q=commonmark\\" chk=\\"confirm\\" data-v-a056081e>www.google.com/search?q=commonmark</b>&amp;amp;

<h3 data-v-a056081e>Example 603</h3>
&lt; immediately ends an autolink.

<b title=\\"http
www.commonmark.org\\" href=\\"http://www.commonmark.org/he\\" chk=\\"confirm\\" data-v-a056081e>www.commonmark.org/he</b>&lt;lp

<h3 data-v-a056081e>Example 604</h3>
<b title=\\"http
commonmark.org\\" href=\\"http://commonmark.org\\" chk=\\"confirm\\" data-v-a056081e>http://commonmark.org</b>

(Visit <b title=\\"https
encrypted.google.com\\" href=\\"https://encrypted.google.com/search?q=Markup+(business)\\" chk=\\"confirm\\" data-v-a056081e>https://encrypted.google.com/search?q=Markup+(business)</b>)

Anonymous FTP is available at <b title=\\"ftp
foo.bar.baz\\" href=\\"ftp://foo.bar.baz\\" chk=\\"confirm\\" data-v-a056081e>ftp://foo.bar.baz</b>.

Extended email autolinks:

<h3 data-v-a056081e>Example 605</h3>
<b title=\\"mailto:foo@bar.baz
\\" href=\\"mailto:foo@bar.baz\\" chk=\\"confirm\\" data-v-a056081e>foo@bar.baz</b>

<h3 data-v-a056081e>Example 606</h3>
hello@mail+xyz.example isn't valid, but <b title=\\"mailto:hello+xyz@mail.example
\\" href=\\"mailto:hello+xyz@mail.example\\" chk=\\"confirm\\" data-v-a056081e>hello+xyz@mail.example</b> is.

<h3 data-v-a056081e>Example 607</h3>
<b title=\\"mailto:a.b-c_d@a.b
\\" href=\\"mailto:a.b-c_d@a.b\\" chk=\\"confirm\\" data-v-a056081e>a.b-c_d@a.b</b>

<b title=\\"mailto:a.b-c_d@a.b
\\" href=\\"mailto:a.b-c_d@a.b\\" chk=\\"confirm\\" data-v-a056081e>a.b-c_d@a.b</b>.

a.b-c_d@a.b-

    a.b-c_d@a.b_
</article>"
`;

exports[`./__tests__/new/gfm_break.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>breaks: true</h2>Look at the
pretty line
breaks.
</article>"
`;

exports[`./__tests__/new/gfm_code.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><pre data-v-a056081e><code class=\\"undefinedjs\\" data-v-a056081e>var a = 'hello';
console.log(a + ' world');</code></pre>
<pre data-v-a056081e><code class=\\"undefinedbash\\" data-v-a056081e>echo &quot;hello, \${WORLD}&quot;</code></pre>
<pre data-v-a056081e><code class=\\"undefinedlongfence\\" data-v-a056081e>Q: What do you call a tall person who sells stolen goods?</code></pre>
<pre data-v-a056081e><code class=\\"undefinedManyTildes\\" data-v-a056081e>A longfence!</code></pre>
How about an empty code block?

<pre data-v-a056081e><code class=\\"undefinedjs\\" data-v-a056081e></code></pre>
How about a code block with only an empty line?

<pre data-v-a056081e><code class=\\"undefinedjs\\" data-v-a056081e></code></pre>
With some trailing empty lines:

<pre data-v-a056081e><code data-v-a056081e>ciao

</code></pre></article>"
`;

exports[`./__tests__/new/gfm_code_hr_list.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h2 data-v-a056081e>foo</h2>
<ol data-v-a056081e><li data-v-a056081e>bar:

<blockquote data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>one
<ul data-v-a056081e><li data-v-a056081e>two
<ul data-v-a056081e><li data-v-a056081e>three</li><li data-v-a056081e>four</li><li data-v-a056081e>five</li></ul></li></ul></li></ul></blockquote></li><li data-v-a056081e>foo:

<pre data-v-a056081e><code data-v-a056081e> line 1
 line 2</code></pre></li><li data-v-a056081e>foo:

<ol data-v-a056081e><li data-v-a056081e>foo <code data-v-a056081e>bar</code> bar:

<pre data-v-a056081e><code class=\\"undefinederb\\" data-v-a056081e> some code here</code></pre></li><li data-v-a056081e>foo <code data-v-a056081e>bar</code> bar:

<pre data-v-a056081e><code class=\\"undefinederb\\" data-v-a056081e> foo
 ---
 bar
 ---
 foo
 bar</code></pre></li><li data-v-a056081e>foo <code data-v-a056081e>bar</code> bar:

<pre data-v-a056081e><code class=\\"undefinedhtml\\" data-v-a056081e> ---
 foo
 foo
 ---
 bar</code></pre></li><li data-v-a056081e>foo <code data-v-a056081e>bar</code> bar:

<h2 data-v-a056081e>     foo</h2>     bar
</li><li data-v-a056081e>foo
</li></ol></li></ol></article>"
`;

exports[`./__tests__/new/gfm_del.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>hello <del data-v-a056081e>hi</del> world
</article>"
`;

exports[`./__tests__/new/gfm_em.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>These words should_not_be_emphasized.
</article>"
`;

exports[`./__tests__/new/gfm_hashtag.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: true</h2>#header

<h1 data-v-a056081e>header1</h1>
<h1 data-v-a056081e>header2</h1></article>"
`;

exports[`./__tests__/new/gfm_links_invalid.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>sanitize: true</h2>This should not be linked: http://example.com/%ff
</article>"
`;

exports[`./__tests__/new/gfm_tables.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><div class=\\"swipe\\" data-v-a056081e><table data-v-a056081e><thead data-v-a056081e><tr data-v-a056081e><th data-v-a056081e>Heading 1 </th><th data-v-a056081e> Heading 2</th></tr></thead><tbody data-v-a056081e><tr data-v-a056081e><td data-v-a056081e>Cell 1    </td><td data-v-a056081e> Cell 2</td></tr><tr data-v-a056081e><td data-v-a056081e>Cell 3    </td><td data-v-a056081e> Cell 4</td></tr></tbody></table></div>
<div class=\\"swipe\\" data-v-a056081e><table data-v-a056081e><thead data-v-a056081e><tr data-v-a056081e><th class=\\"c\\" data-v-a056081e>Header 1 </th><th class=\\"r\\" data-v-a056081e> Header 2 </th><th class=\\"l\\" data-v-a056081e> Header 3 </th><th data-v-a056081e> Header 4</th></tr></thead><tbody data-v-a056081e><tr data-v-a056081e><td class=\\"c\\" data-v-a056081e>Cell 1   </td><td class=\\"r\\" data-v-a056081e> Cell 2   </td><td class=\\"l\\" data-v-a056081e> Cell 3   </td><td data-v-a056081e> Cell 4</td></tr><tr data-v-a056081e><td class=\\"c\\" data-v-a056081e>Cell 5   </td><td class=\\"r\\" data-v-a056081e> Cell 6   </td><td class=\\"l\\" data-v-a056081e> Cell 7   </td><td data-v-a056081e> Cell 8</td></tr></tbody></table></div>
    Test code

<div class=\\"swipe\\" data-v-a056081e><table data-v-a056081e><thead data-v-a056081e><tr data-v-a056081e><th data-v-a056081e>Header 1 </th><th data-v-a056081e> Header 2</th></tr></thead><tbody data-v-a056081e><tr data-v-a056081e><td data-v-a056081e>Cell 1   </td><td data-v-a056081e> Cell 2</td></tr><tr data-v-a056081e><td data-v-a056081e>Cell 3   </td><td data-v-a056081e> Cell 4</td></tr></tbody></table></div>
<div class=\\"swipe\\" data-v-a056081e><table data-v-a056081e><thead data-v-a056081e><tr data-v-a056081e><th class=\\"l\\" data-v-a056081e>Header 1</th><th class=\\"c\\" data-v-a056081e>Header 2</th><th class=\\"r\\" data-v-a056081e>Header 3</th><th data-v-a056081e>Header 4</th></tr></thead><tbody data-v-a056081e><tr data-v-a056081e><td class=\\"l\\" data-v-a056081e>Cell 1  </td><td class=\\"c\\" data-v-a056081e>Cell 2  </td><td class=\\"r\\" data-v-a056081e>Cell 3  </td><td data-v-a056081e>Cell 4</td></tr><tr data-v-a056081e><td class=\\"l\\" data-v-a056081e>*Cell 5*</td><td class=\\"c\\" data-v-a056081e>Cell 6  </td><td class=\\"r\\" data-v-a056081e>Cell 7  </td><td data-v-a056081e>Cell 8</td></tr></tbody></table></div></article>"
`;

exports[`./__tests__/new/headings_id.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h3 data-v-a056081e>Heading with a <b title=\\"http
github.com\\" href=\\"http://github.com/\\" chk=\\"confirm\\" data-v-a056081e>link</b></h3>
<h3 data-v-a056081e>Heading with some _italic text_</h3>
<h3 data-v-a056081e>Or some <strong data-v-a056081e>strong</strong></h3>(which doesn't really make any difference, here)

<h3 data-v-a056081e>Or even <code data-v-a056081e>code</code></h3>
<h3 data-v-a056081e>What about <del data-v-a056081e>strikethrough</del></h3>
<h2 data-v-a056081e>And a ref <b title=\\"link to nowhere\\" href=\\"/some/url\\" chk=\\"confirm\\" data-v-a056081e>link</b></h2>
</article>"
`;

exports[`./__tests__/new/hr_list_break.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>hello
world</li><li data-v-a056081e>how
are
</li></ul><hr data-v-a056081e>you today?
</article>"
`;

exports[`./__tests__/new/html_comments.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h3 data-v-a056081e>Example 1</h3>
&lt;!-- comment --&gt;

<h3 data-v-a056081e>Example 2</h3>
&lt;!----&gt;

<h3 data-v-a056081e>Example 3</h3>
&lt;!-- --&gt;

<h3 data-v-a056081e>Example 4</h3>
&lt;!-- - --&gt;

<h3 data-v-a056081e>Example 5</h3>
&lt;!-- -- --&gt;

<h3 data-v-a056081e>Example 6</h3>
&lt;!-- ---&gt;

<h3 data-v-a056081e>Example 7</h3>
&lt;!-----&gt;

<h3 data-v-a056081e>Example 8</h3>
&lt;!------&gt;

<h3 data-v-a056081e>Example 9</h3>
&lt;!-- My favorite operators are &gt; and &lt;!--&gt;

<h3 data-v-a056081e>Example 10</h3>
&lt;!-- multi
line    
comment
--&gt;

<h3 data-v-a056081e>Example 11</h3>
   &lt;!-- indented comment --&gt;

    &lt;!-- too much indentation --&gt;

<h3 data-v-a056081e>Example 12</h3>
&lt;!<s data-v-a056081e>&gt; not a comment </s>&gt;

&lt;!<s data-v-a056081e>-&gt; not a comment </s>&gt;

&lt;!-- &lt;!-- not a comment? --&gt; --&gt;</article>"
`;

exports[`./__tests__/new/lazy_blockquotes.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><blockquote data-v-a056081e>hi there
bud</blockquote></article>"
`;

exports[`./__tests__/new/link_lt.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><b title=\\"&lt;test
\\" href=\\"&lt;test\\" chk=\\"confirm\\" data-v-a056081e>URL</b>
</article>"
`;

exports[`./__tests__/new/links.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>sanitize: true</h2>URL

URL

URL

URL

URL
</article>"
`;

exports[`./__tests__/new/list_item_text.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>item1

<ul data-v-a056081e><li data-v-a056081e>item2

</li></ul>text
</li></ul></article>"
`;

exports[`./__tests__/new/loose_lists.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>hello
world

how
are</li><li data-v-a056081e>you



</li></ul>better behavior:

<ul data-v-a056081e><li data-v-a056081e>hello
<ul data-v-a056081e><li data-v-a056081e>world
how

are
you
</li><li data-v-a056081e>today</li></ul></li><li data-v-a056081e>hi



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello
</li><li data-v-a056081e>world</li><li data-v-a056081e>hi



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>world
</li><li data-v-a056081e>hi



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>world

how</li><li data-v-a056081e>hi



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>world</li><li data-v-a056081e>how

are



</li></ul><ul data-v-a056081e><li data-v-a056081e>hello</li><li data-v-a056081e>world
</li><li data-v-a056081e>how

are
</li></ul></article>"
`;

exports[`./__tests__/new/main.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>
<h1 data-v-a056081e>A heading</h1>
Just a note, I've found that I can't test my markdown parser vs others.
For example, both markdown.js and showdown code blocks in lists wrong. They're
also completely <b title=\\"Google\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>inconsistent</b> with regards to paragraphs in list items.

A link. Not anymore.

&lt;aside&gt;This will make me fail the test because
markdown.js doesnt acknowledge arbitrary html blocks =/&lt;/aside&gt;

<ul data-v-a056081e><li data-v-a056081e>List Item 1
</li><li data-v-a056081e>List Item 2
<ul data-v-a056081e><li data-v-a056081e>New List Item 1
Hi, this is a list item.</li><li data-v-a056081e>New List Item 2
Another item
    Code goes here.
    Lots of it...</li><li data-v-a056081e>New List Item 3
The last item
</li></ul></li><li data-v-a056081e>List Item 3
The final item.
</li><li data-v-a056081e>List Item 4
The real final item.

</li></ul>Paragraph.

<blockquote data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>bq Item 1</li><li data-v-a056081e>bq Item 2
<ul data-v-a056081e><li data-v-a056081e>New bq Item 1</li><li data-v-a056081e>New bq Item 2
Text here</li></ul></li></ul></blockquote>
<hr data-v-a056081e>
<blockquote data-v-a056081e>Another blockquote!
I really need to get
more creative with
mockup text..
markdown.js breaks here again</blockquote>
<h2 data-v-a056081e>Another Heading</h2>
Hello *world*. Here is a <b title=\\"
\\" href=\\"//hello\\" chk=\\"confirm\\" data-v-a056081e>link</b>.
And an image <img src=\\"src\\" alt=\\"alt\\" data-v-a056081e>.

    Code goes here.
    Lots of it...
</article>"
`;

exports[`./__tests__/new/mangle_xss.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e>sanatize: true
<h2 data-v-a056081e>mangle: false</h2>&lt;&lt;svg/onload=&quot;alert(1)&quot;//@x&gt;

&lt;bar&quot;onclick=&quot;alert('XSS')&quot;@foo&gt;
</article>"
`;

exports[`./__tests__/new/nested_code.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><code data-v-a056081e>hi ther \`\` ok \`\`\` </code>

<code data-v-a056081e>\` </code>

<code data-v-a056081e>There is a literal backtick (\`) here.</code>

A backtick-delimited string in a code span: <code data-v-a056081e>\`foo\` </code>

Please don't use any <code data-v-a056081e>&lt;blink&gt;</code> tags.</article>"
`;

exports[`./__tests__/new/nested_em.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>*test <strong data-v-a056081e>test</strong> test*

_test <strong data-v-a056081e>test</strong> test_
</article>"
`;

exports[`./__tests__/new/nested_square_link.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>the <code data-v-a056081e>]</code> character</b>

<b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>the \` character</b>
</article>"
`;

exports[`./__tests__/new/nogfm_hashtag.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: false</h2>#header

<h1 data-v-a056081e>header1</h1>
<h1 data-v-a056081e>header2</h1></article>"
`;

exports[`./__tests__/new/not_a_link.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>[test](not a link)
</article>"
`;

exports[`./__tests__/new/redos_html_closing.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>&lt;tag  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;  &quot;&quot;&lt;&quot; /&gt;a'a
</article>"
`;

exports[`./__tests__/new/redos_nolink.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>![[[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[][[]!\\\\
</article>"
`;

exports[`./__tests__/new/ref_paren.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><b title=\\"there\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>hi</b>

</article>"
`;

exports[`./__tests__/new/relative_urls.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>baseUrl: &quot;<b title=\\"http
example.com\\" href=\\"http://example.com/base/&quot;\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/base/&quot;</b></h2><h1 data-v-a056081e>Absolutization of RFC 3986 URIs</h1>
<h2 data-v-a056081e>Absolute URI</h2><b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"http://example.com/logo\\" alt=\\"section 4.3\\" data-v-a056081e></b>

<h2 data-v-a056081e>Network-path reference</h2><b title=\\"
\\" href=\\"//example.com/\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"//example.com/logo\\" alt=\\"section 4.2\\" data-v-a056081e></b>

<h2 data-v-a056081e>Absolute path</h2><b title=\\"
path\\" href=\\"/path/to/content\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"/path/to/img\\" alt=\\"section 4.2\\" data-v-a056081e></b>

<h2 data-v-a056081e>Relative path</h2><b title=\\"content
\\" href=\\"content\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"img\\" alt=\\"section 4.2\\" data-v-a056081e></b>

<h2 data-v-a056081e>Dot-relative path</h2><b title=\\".
content\\" href=\\"./content\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"./img\\" alt=\\"section 3.3\\" data-v-a056081e></b>

<b title=\\"..
content\\" href=\\"../content\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"../img\\" alt=\\"section 3.3\\" data-v-a056081e></b>

<h2 data-v-a056081e>Same-document query</h2><b title=\\"
\\" href=\\"?\\" chk=\\"confirm\\" data-v-a056081e><img src=\\"?type=image\\" alt=\\"section 4.4\\" data-v-a056081e></b>

<h2 data-v-a056081e>Same-document fragment</h2><q title=\\"
\\" data-v-a056081e><img src=\\"#img\\" alt=\\"section 4.4\\" data-v-a056081e></q>

<h2 data-v-a056081e>Empty</h2><q title=\\"
\\" data-v-a056081e>section 4.2</q>
</article>"
`;

exports[`./__tests__/new/same_bullet.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>test</li><li data-v-a056081e>test</li><li data-v-a056081e>test
</li></ul></article>"
`;

exports[`./__tests__/new/smartypants.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>smartypants: true</h2>Hello world 'how' &quot;are&quot; you -- today...

&quot;It's a more 'challenging' smartypants test...&quot;

'And,' as a bonus --- &quot;one
multiline&quot; test!
</article>"
`;

exports[`./__tests__/new/toplevel_paragraphs.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>gfm: true</h2>hello world
    text after spaces
    text after spaces

paragraph before code
<pre data-v-a056081e><code data-v-a056081e>text inside block code</code></pre>
paragraph before hr
<hr data-v-a056081e>
paragraph before head with hash
<h1 data-v-a056081e>how are you</h1>
paragraph before head with equals
<h1 data-v-a056081e>how are you</h1>
paragraph before blockquote
<blockquote data-v-a056081e>text for blockquote</blockquote>
paragraph before list
<ul data-v-a056081e><li data-v-a056081e>text inside list

</li></ul>paragraph before div
&lt;div&gt;text inside div&lt;/div&gt;

paragraph with span
&lt;span&gt;text inside span&lt;/span&gt;

hello <b title=\\"
are\\" href=\\"/are/you\\" chk=\\"confirm\\" data-v-a056081e>world</b>


&lt;div&gt;hello&lt;/div&gt;

&lt;span&gt;hello&lt;/span&gt;
</article>"
`;

exports[`./__tests__/new/tricky_list.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><strong data-v-a056081e>hello</strong> _world_

<ul data-v-a056081e><li data-v-a056081e>hello world

</li></ul><strong data-v-a056081e>hello</strong> _world_

<ul data-v-a056081e><li data-v-a056081e>hello world

</li></ul><strong data-v-a056081e>hello</strong> _world_

<ul data-v-a056081e><li data-v-a056081e>Hello world

</li></ul><strong data-v-a056081e>hello</strong> _world_

<ul data-v-a056081e><li data-v-a056081e>hello world
</li></ul></article>"
`;

exports[`./__tests__/new/uppercase_hex.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>sanitize: true</h2>lowerclick melower
upperclick meupper
</article>"
`;

exports[`./__tests__/original/amps_and_angles_encoding.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>pedantic: true</h2>
AT&amp;T has an ampersand in their name.

AT&amp;amp;T is another way to write it.

This &amp; that.

4 &lt; 5.

6 &gt; 5.

Here's a [link] <b title=\\"http
example.com\\" href=\\"http://example.com/?foo=1&amp;bar=2\\" chk=\\"confirm\\" data-v-a056081e>1</b> with an ampersand in the URL.

Here's a link with an amersand in the link text: [AT&amp;T] <b title=\\"AT&amp;T\\" href=\\"http://att.com/\\" chk=\\"confirm\\" data-v-a056081e>2</b>.

Here's an inline <b title=\\"
script\\" href=\\"/script?foo=1&amp;bar=2\\" chk=\\"confirm\\" data-v-a056081e>link</b>.

Here's an inline <b title=\\"
script\\" href=\\"/script?foo=1&amp;bar=2\\" chk=\\"confirm\\" data-v-a056081e>link</b>.


</article>"
`;

exports[`./__tests__/original/auto_links.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>Link: <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>.

With an ampersand: <b title=\\"http
example.com\\" href=\\"http://example.com/?foo=1&amp;bar=2\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/?foo=1&amp;bar=2</b>

<ul data-v-a056081e><li data-v-a056081e>In a list?</li><li data-v-a056081e><b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b></li><li data-v-a056081e>It should.

</li></ul><blockquote data-v-a056081e>Blockquoted: <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b></blockquote>
Auto-links should not occur here: <code data-v-a056081e>&lt;http://example.com/&gt;</code>

    or here: <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>
</article>"
`;

exports[`./__tests__/original/backslash_escapes.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>These should all get escaped:

Backslash: \\\\

Backtick: \`

Asterisk: *

Underscore: _

Left brace: {

Right brace: }

Left bracket: [

Right bracket: ]

Left paren: (

Right paren: )

Greater-than: &gt;

Hash: #

Period: .

Bang: !

Plus: +

Minus: -



These should not, because they occur within a code block:

    Backslash: \\\\

    Backtick: \`

    Asterisk: *

    Underscore: _

    Left brace: {

    Right brace: }

    Left bracket: [

    Right bracket: ]

    Left paren: (

    Right paren: )

    Greater-than: &gt;

    Hash: #

    Period: .

    Bang: !

    Plus: +

    Minus: -


Nor should these, which occur in code spans:

Backslash: <code data-v-a056081e>\\\\\\\\</code>

Backtick: <code data-v-a056081e>\\\\\` </code>

Asterisk: <code data-v-a056081e>\\\\*</code>

Underscore: <code data-v-a056081e>\\\\_</code>

Left brace: <code data-v-a056081e>\\\\{</code>

Right brace: <code data-v-a056081e>\\\\}</code>

Left bracket: <code data-v-a056081e>\\\\[</code>

Right bracket: <code data-v-a056081e>\\\\]</code>

Left paren: <code data-v-a056081e>\\\\(</code>

Right paren: <code data-v-a056081e>\\\\)</code>

Greater-than: <code data-v-a056081e>\\\\&gt;</code>

Hash: <code data-v-a056081e>\\\\#</code>

Period: <code data-v-a056081e>\\\\.</code>

Bang: <code data-v-a056081e>\\\\!</code>

Plus: <code data-v-a056081e>\\\\+</code>

Minus: <code data-v-a056081e>\\\\-</code>


These should get escaped, even though they're matching pairs for
other Markdown constructs:

*asterisks*

_underscores_

\`backticks\`

This is a code span with a literal backslash-backtick sequence: <code data-v-a056081e>\\\\\` </code>

This is a tag with unescaped backticks &lt;span attr='\`ticks\`'&gt;bar&lt;/span&gt;.

This is a tag with backslashes &lt;span attr='\\\\\\\\backslashes\\\\\\\\'&gt;bar&lt;/span&gt;.
</article>"
`;

exports[`./__tests__/original/blockquotes_with_code_blocks.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><blockquote data-v-a056081e>Example:

    sub status {
        print &quot;working&quot;;
    }

Or:

    sub status {
        return &quot;working&quot;;
    }</blockquote></article>"
`;

exports[`./__tests__/original/code_blocks.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>    code block on the first line

Regular text.

    code block indented by spaces

Regular text.

    the lines in this block
    all contain trailing spaces  

Regular Text.

    code block on the last line
</article>"
`;

exports[`./__tests__/original/code_spans.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><code data-v-a056081e>&lt;test a=&quot;</code> content of attribute <code data-v-a056081e>&quot;&gt;</code>

Fix for backticks within HTML tag: &lt;span attr='\`ticks\`'&gt;like this&lt;/span&gt;

Here's how you put <code data-v-a056081e>\`backticks\` </code> in a code span.

</article>"
`;

exports[`./__tests__/original/hard_wrapped_paragraphs_with_list_like_lines.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>In Markdown 1.0.0 and earlier. Version
<ol start=\\"8\\" data-v-a056081e><li data-v-a056081e>This line turns into a list item.
Because a hard-wrapped line in the
middle of a paragraph looked like a
list item.

</li></ol>Here's one with a bullet.
<ul data-v-a056081e><li data-v-a056081e>criminey.
</li></ul></article>"
`;

exports[`./__tests__/original/horizontal_rules.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>Dashes:

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
    ---

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
<ul data-v-a056081e><li data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>-


</li></ul></li></ul>Asterisks:

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
    ***

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
<ul data-v-a056081e><li data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>*


</li></ul></li></ul>Underscores:

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
    ___

<hr data-v-a056081e>
<hr data-v-a056081e> 
<hr data-v-a056081e>
<hr data-v-a056081e>
    _ _ _



Not horizontal rules:

--*

-*-

*--

 -_-

  __-

   -__

    _-_


Long rules:

<hr data-v-a056081e>
<hr data-v-a056081e>
<hr data-v-a056081e></article>"
`;

exports[`./__tests__/original/inline_html_advanced.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>Simple block on one line:

&lt;div&gt;foo&lt;/div&gt;

And nested without indentation:

&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
foo
&lt;/div&gt;
&lt;div style=&quot;&gt;&quot;/&gt;
&lt;/div&gt;
&lt;div&gt;bar&lt;/div&gt;
&lt;/div&gt;
</article>"
`;

exports[`./__tests__/original/inline_html_comments.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>Paragraph one.

&lt;!-- This is a simple comment --&gt;

&lt;!--
    This is another comment.
--&gt;

Paragraph two.

&lt;!-- one comment block -- -- with two comments --&gt;

The end.
</article>"
`;

exports[`./__tests__/original/inline_html_simple.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e>Here's a simple block:

&lt;div&gt;
    foo
&lt;/div&gt;

This should be a code block, though:

    &lt;div&gt;
        foo
    &lt;/div&gt;

As should this:

    &lt;div&gt;foo&lt;/div&gt;

Now, nested:

&lt;div&gt;
    &lt;div&gt;
        &lt;div&gt;
            foo
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

This should just be an HTML comment:

&lt;!-- Comment --&gt;

Multiline:

&lt;!--
Blah
Blah
--&gt;

Code block:

    &lt;!-- Comment --&gt;

Just plain comment, with trailing spaces on the line:

&lt;!-- foo --&gt;   

Code:

    &lt;hr /&gt;

Hr's:

&lt;hr&gt;

&lt;hr/&gt;

&lt;hr /&gt;

&lt;hr&gt;   

&lt;hr/&gt;  

&lt;hr /&gt; 

&lt;hr class=&quot;foo&quot; id=&quot;bar&quot; /&gt;

&lt;hr class=&quot;foo&quot; id=&quot;bar&quot;/&gt;

&lt;hr class=&quot;foo&quot; id=&quot;bar&quot; &gt;

</article>"
`;

exports[`./__tests__/original/links_inline_style.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>pedantic: true</h2>
Just a <b title=\\"
url\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL</b>.

<b title=\\"title\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL and title</b>.

<b title=\\"title preceded by two spaces\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL and title</b>.

<b title=\\"title preceded by a tab\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL and title</b>.

<b title=\\"title has spaces afterward\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>URL and title</b>.

[URL and title]( /url/has space ).

[URL and title]( /url/has space/ &quot;url has space and title&quot;).

<q title=\\"
\\" data-v-a056081e>Empty</q>.
</article>"
`;

exports[`./__tests__/original/links_reference_style.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>pedantic: true</h2>
Foo [bar] <b title=\\"Title\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>1</b>.

Foo <b title=\\"Title\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>bar</b>.

Foo [bar]
<b title=\\"Title\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>1</b>.



With [embedded [brackets]] <b title=\\"
url\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>b</b>.


Indented <b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>once</b>.

Indented <b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>twice</b>.

Indented <b title=\\"
url\\" href=\\"/url\\" chk=\\"confirm\\" data-v-a056081e>thrice</b>.

Indented [four][] times.




    [four]: /url



<hr data-v-a056081e>
<b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b> <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b> should work

So should <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b>.

And <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b> [].

And <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b>.

And <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b>.

But not [that] [].

Nor [that][].

Nor [that].

[Something in brackets like <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b> should work]

[Same with <b title=\\"foo
\\" href=\\"foo\\" chk=\\"confirm\\" data-v-a056081e>this</b>.]

In this case, <b title=\\"
somethingelse\\" href=\\"/somethingelse/\\" chk=\\"confirm\\" data-v-a056081e>this</b> points to something else.

Backslashing should suppress [this] and [this].



<hr data-v-a056081e>
Here's one where the <b title=\\"
url\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>link
breaks</b> across lines.

Here's another where the <b title=\\"
url\\" href=\\"/url/\\" chk=\\"confirm\\" data-v-a056081e>link
breaks</b> across lines, but with a line-ending space.


</article>"
`;

exports[`./__tests__/original/links_shortcut_references.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>pedantic: true</h2>
This is the <b title=\\"
simple\\" href=\\"/simple\\" chk=\\"confirm\\" data-v-a056081e>simple case</b>.




This one has a <b title=\\"
foo\\" href=\\"/foo\\" chk=\\"confirm\\" data-v-a056081e>line
break</b>.

This one has a <b title=\\"
foo\\" href=\\"/foo\\" chk=\\"confirm\\" data-v-a056081e>line
break</b> with a line-ending space.



<b title=\\"
this\\" href=\\"/this\\" chk=\\"confirm\\" data-v-a056081e>this</b> <b title=\\"
that\\" href=\\"/that\\" chk=\\"confirm\\" data-v-a056081e>that</b> and the <b title=\\"
other\\" href=\\"/other\\" chk=\\"confirm\\" data-v-a056081e>other</b>

</article>"
`;

exports[`./__tests__/original/literal_quotes_in_titles.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>pedantic: true</h2>
Foo [bar][].

Foo [bar](/url/ &quot;Title with &quot;quotes&quot; inside&quot;).


  [bar]: /url/ &quot;Title with &quot;quotes&quot; inside&quot;

</article>"
`;

exports[`./__tests__/original/markdown_documentation_basics.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>pedantic: true</h2>
<h1 data-v-a056081e>Markdown: Basics</h1>
&lt;ul id=&quot;ProjectSubmenu&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/&quot; title=&quot;Markdown Project Page&quot;&gt;Main&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;selected&quot; title=&quot;Markdown Basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/syntax&quot; title=&quot;Markdown Syntax Documentation&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/license&quot; title=&quot;Pricing and License Information&quot;&gt;License&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/dingus&quot; title=&quot;Online Markdown Web Form&quot;&gt;Dingus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


<h2 data-v-a056081e>Getting the Gist of Markdown's Formatting Syntax</h2>
This page offers a brief overview of what it's like to use Markdown.
The [syntax page] <b title=\\"Markdown Syntax\\" href=\\"/projects/markdown/syntax\\" chk=\\"confirm\\" data-v-a056081e>s</b> provides complete, detailed documentation for
every feature, but Markdown should be very easy to pick up simply by
looking at a few examples of it in action. The examples on this page
are written in a before/after style, showing example syntax and the
HTML output produced by Markdown.

It's also helpful to simply try Markdown out; the [Dingus] <b title=\\"Markdown Dingus\\" href=\\"/projects/markdown/dingus\\" chk=\\"confirm\\" data-v-a056081e>d</b> is a
web application that allows you type your own Markdown-formatted text
and translate it to XHTML.

<strong data-v-a056081e>Note:</strong> This document is itself written using Markdown; you
can [see the source for it by adding '.text' to the URL] <b title=\\"
projects\\" href=\\"/projects/markdown/basics.text\\" chk=\\"confirm\\" data-v-a056081e>src</b>.



<h2 data-v-a056081e>Paragraphs, Headers, Blockquotes</h2>
A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.

Markdown offers two styles of headers: *Setext* and *atx*.
Setext-style headers for <code data-v-a056081e>&lt;h1&gt;</code> and <code data-v-a056081e>&lt;h2&gt;</code> are created by
&quot;underlining&quot; with equal signs (<code data-v-a056081e>=</code>) and hyphens (<code data-v-a056081e>-</code>), respectively.
To create an atx-style header, you put 1-6 hash marks (<code data-v-a056081e>#</code>) at the
beginning of the line -- the number of hashes equals the resulting
HTML header level.

Blockquotes are indicated using email-style '<code data-v-a056081e>&gt;</code>' angle brackets.

Markdown:

<h1 data-v-a056081e>    A First Level Header</h1>    
<h2 data-v-a056081e>    A Second Level Header</h2>
    Now is the time for all good men to come to
    the aid of their country. This is just a
    regular paragraph.

    The quick brown fox jumped over the lazy
    dog's back.
    
<h3 data-v-a056081e>Header 3</h3>
    &gt; This is a blockquote.
    &gt;
    &gt; This is the second paragraph in the blockquote.
    &gt;
    &gt; ## This is an H2 in a blockquote


Output:

    &lt;h1&gt;A First Level Header&lt;/h1&gt;

    &lt;h2&gt;A Second Level Header&lt;/h2&gt;

    &lt;p&gt;Now is the time for all good men to come to
    the aid of their country. This is just a
    regular paragraph.&lt;/p&gt;

    &lt;p&gt;The quick brown fox jumped over the lazy
    dog's back.&lt;/p&gt;

    &lt;h3&gt;Header 3&lt;/h3&gt;

    &lt;blockquote&gt;
        &lt;p&gt;This is a blockquote.&lt;/p&gt;

        &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;

        &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;
    &lt;/blockquote&gt;



<h3 data-v-a056081e>Phrase Emphasis</h3>
Markdown uses asterisks and underscores to indicate spans of emphasis.

Markdown:

    Some of these words *are emphasized*.
    Some of these words _are emphasized also_.

    Use two asterisks for <strong data-v-a056081e>strong emphasis</strong>.
    Or, if you prefer, <strong data-v-a056081e>use two underscores instead</strong>.

Output:

    &lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.
    Some of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.
    Or, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;
   


<h2 data-v-a056081e>Lists</h2>
Unordered (bulleted) lists use asterisks, pluses, and hyphens (<code data-v-a056081e>*</code>,
<code data-v-a056081e>+</code>, and <code data-v-a056081e>-</code>) as list markers. These three markers are
interchangable; this:

<ul data-v-a056081e><li data-v-a056081e>Candy.</li><li data-v-a056081e>Gum.</li><li data-v-a056081e>Booze.

</li></ul>this:

<ul data-v-a056081e><li data-v-a056081e>Candy.</li><li data-v-a056081e>Gum.</li><li data-v-a056081e>Booze.

</li></ul>and this:

<ul data-v-a056081e><li data-v-a056081e>Candy.</li><li data-v-a056081e>Gum.</li><li data-v-a056081e>Booze.

</li></ul>all produce the same output:

    &lt;ul&gt;
    &lt;li&gt;Candy.&lt;/li&gt;
    &lt;li&gt;Gum.&lt;/li&gt;
    &lt;li&gt;Booze.&lt;/li&gt;
    &lt;/ul&gt;

Ordered (numbered) lists use regular numbers, followed by periods, as
list markers:

<ol data-v-a056081e><li data-v-a056081e>Red</li><li data-v-a056081e>Green</li><li data-v-a056081e>Blue

</li></ol>Output:

    &lt;ol&gt;
    &lt;li&gt;Red&lt;/li&gt;
    &lt;li&gt;Green&lt;/li&gt;
    &lt;li&gt;Blue&lt;/li&gt;
    &lt;/ol&gt;

If you put blank lines between items, you'll get <code data-v-a056081e>&lt;p&gt;</code> tags for the
list item text. You can create multi-paragraph list items by indenting
the paragraphs by 4 spaces or 1 tab:

<ul data-v-a056081e><li data-v-a056081e>A list item.

With multiple paragraphs.
</li><li data-v-a056081e>Another item in the list.

</li></ul>Output:

    &lt;ul&gt;
    &lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;
    &lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;
    &lt;/ul&gt;
    


<h3 data-v-a056081e>Links</h3>
Markdown supports two styles for creating links: *inline* and
*reference*. With both styles, you use square brackets to delimit the
text you want to turn into a link.

Inline-style links use parentheses immediately after the link text.
For example:

    This is an <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>example link</b>.

Output:

    &lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot;&gt;
    example link&lt;/a&gt;.&lt;/p&gt;

Optionally, you may include a title attribute in the parentheses:

    This is an <b title=\\"With a Title\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>example link</b>.

Output:

    &lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot; title=&quot;With a Title&quot;&gt;
    example link&lt;/a&gt;.&lt;/p&gt;

Reference-style links allow you to refer to your links by names, which
you define elsewhere in your document:

    I get 10 times more traffic from [Google][1] than from
    [Yahoo][2] or [MSN][3].

    [1]: <b title=\\"http
google.com\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>http://google.com/</b>        &quot;Google&quot;
    [2]: <b title=\\"http
search.yahoo.com\\" href=\\"http://search.yahoo.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.yahoo.com/</b>  &quot;Yahoo Search&quot;
    [3]: <b title=\\"http
search.msn.com\\" href=\\"http://search.msn.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.msn.com/</b>    &quot;MSN Search&quot;

Output:

    &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
    title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot;
    title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot;
    title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;

The title attribute is optional. Link names may contain letters,
numbers and spaces, but are *not* case sensitive:

    I start my morning with a cup of coffee and
    [The New York Times][NY Times].

    [ny times]: <b title=\\"http
www.nytimes.com\\" href=\\"http://www.nytimes.com/\\" chk=\\"confirm\\" data-v-a056081e>http://www.nytimes.com/</b>

Output:

    &lt;p&gt;I start my morning with a cup of coffee and
    &lt;a href=&quot;http://www.nytimes.com/&quot;&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;


<h3 data-v-a056081e>Images</h3>
Image syntax is very much like link syntax.

Inline (titles are optional):

    <img src=\\"/path/to/img.jpg\\" alt=\\"alt text\\" title=\\"Title\\" data-v-a056081e>

Reference-style:

    ![alt text][id]

    [id]: /path/to/img.jpg &quot;Title&quot;

Both of the above examples produce the same output:

    &lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot; /&gt;



<h3 data-v-a056081e>Code</h3>
In a regular paragraph, you can create code span by wrapping text in
backtick quotes. Any ampersands (<code data-v-a056081e>&amp;</code>) and angle brackets (<code data-v-a056081e>&lt;</code> or
<code data-v-a056081e>&gt;</code>) will automatically be translated into HTML entities. This makes
it easy to use Markdown to write about HTML example code:

    I strongly recommend against using any <code data-v-a056081e>&lt;blink&gt;</code> tags.

    I wish SmartyPants used named entities like <code data-v-a056081e>&amp;mdash;</code>
    instead of decimal-encoded entites like <code data-v-a056081e>&amp;#8212;</code>.

Output:

    &lt;p&gt;I strongly recommend against using any
    &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

    &lt;p&gt;I wish SmartyPants used named entities like
    &lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded
    entites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;


To specify an entire block of pre-formatted code, indent every line of
the block by 4 spaces or 1 tab. Just like with code spans, <code data-v-a056081e>&amp;</code>, <code data-v-a056081e>&lt;</code>,
and <code data-v-a056081e>&gt;</code> characters will be escaped automatically.

Markdown:

    If you want your page to validate under XHTML 1.0 Strict,
    you've got to put paragraph tags in your blockquotes:

        &lt;blockquote&gt;
            &lt;p&gt;For example.&lt;/p&gt;
        &lt;/blockquote&gt;

Output:

    &lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,
    you've got to put paragraph tags in your blockquotes:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;
        &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;
    &amp;lt;/blockquote&amp;gt;
    &lt;/code&gt;&lt;/pre&gt;
</article>"
`;

exports[`./__tests__/original/markdown_documentation_syntax.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><hr data-v-a056081e><h2 data-v-a056081e>pedantic: true</h2>
<h1 data-v-a056081e>Markdown: Syntax</h1>
&lt;ul id=&quot;ProjectSubmenu&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/&quot; title=&quot;Markdown Project Page&quot;&gt;Main&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/basics&quot; title=&quot;Markdown Basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&quot;selected&quot; title=&quot;Markdown Syntax Documentation&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/license&quot; title=&quot;Pricing and License Information&quot;&gt;License&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/projects/markdown/dingus&quot; title=&quot;Online Markdown Web Form&quot;&gt;Dingus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


<ul data-v-a056081e><li data-v-a056081e><b title=\\"
overview\\" href=\\"#overview\\" chk=\\"confirm\\" data-v-a056081e>Overview</b>
<ul data-v-a056081e><li data-v-a056081e><b title=\\"
philosophy\\" href=\\"#philosophy\\" chk=\\"confirm\\" data-v-a056081e>Philosophy</b></li><li data-v-a056081e><b title=\\"
html\\" href=\\"#html\\" chk=\\"confirm\\" data-v-a056081e>Inline HTML</b></li><li data-v-a056081e><b title=\\"
autoescape\\" href=\\"#autoescape\\" chk=\\"confirm\\" data-v-a056081e>Automatic Escaping for Special Characters</b></li></ul></li><li data-v-a056081e><b title=\\"
block\\" href=\\"#block\\" chk=\\"confirm\\" data-v-a056081e>Block Elements</b>
<ul data-v-a056081e><li data-v-a056081e><b title=\\"
p\\" href=\\"#p\\" chk=\\"confirm\\" data-v-a056081e>Paragraphs and Line Breaks</b></li><li data-v-a056081e><b title=\\"
header\\" href=\\"#header\\" chk=\\"confirm\\" data-v-a056081e>Headers</b></li><li data-v-a056081e><b title=\\"
blockquote\\" href=\\"#blockquote\\" chk=\\"confirm\\" data-v-a056081e>Blockquotes</b></li><li data-v-a056081e><b title=\\"
list\\" href=\\"#list\\" chk=\\"confirm\\" data-v-a056081e>Lists</b></li><li data-v-a056081e><b title=\\"
precode\\" href=\\"#precode\\" chk=\\"confirm\\" data-v-a056081e>Code Blocks</b></li><li data-v-a056081e><b title=\\"
hr\\" href=\\"#hr\\" chk=\\"confirm\\" data-v-a056081e>Horizontal Rules</b></li></ul></li><li data-v-a056081e><b title=\\"
span\\" href=\\"#span\\" chk=\\"confirm\\" data-v-a056081e>Span Elements</b>
<ul data-v-a056081e><li data-v-a056081e><b title=\\"
link\\" href=\\"#link\\" chk=\\"confirm\\" data-v-a056081e>Links</b></li><li data-v-a056081e><b title=\\"
em\\" href=\\"#em\\" chk=\\"confirm\\" data-v-a056081e>Emphasis</b></li><li data-v-a056081e><b title=\\"
code\\" href=\\"#code\\" chk=\\"confirm\\" data-v-a056081e>Code</b></li><li data-v-a056081e><b title=\\"
img\\" href=\\"#img\\" chk=\\"confirm\\" data-v-a056081e>Images</b></li></ul></li><li data-v-a056081e><b title=\\"
misc\\" href=\\"#misc\\" chk=\\"confirm\\" data-v-a056081e>Miscellaneous</b>
<ul data-v-a056081e><li data-v-a056081e><b title=\\"
backslash\\" href=\\"#backslash\\" chk=\\"confirm\\" data-v-a056081e>Backslash Escapes</b></li><li data-v-a056081e><b title=\\"
autolink\\" href=\\"#autolink\\" chk=\\"confirm\\" data-v-a056081e>Automatic Links</b>


</li></ul></li></ul><strong data-v-a056081e>Note:</strong> This document is itself written using Markdown; you
can <b title=\\"
projects\\" href=\\"/projects/markdown/syntax.text\\" chk=\\"confirm\\" data-v-a056081e>see the source for it by adding '.text' to the URL</b>.


<hr data-v-a056081e>
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h3&gt;

Markdown is intended to be as easy-to-read and easy-to-write as is feasible.

Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it's been marked up with tags or formatting instructions. While
Markdown's syntax has been influenced by several existing text-to-HTML
filters <s data-v-a056081e> including [Setext] <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/mirror/setext.html\\" chk=\\"confirm\\" data-v-a056081e>1</b>, [atx] <b title=\\"http
www.aaronsw.com\\" href=\\"http://www.aaronsw.com/2002/atx/\\" chk=\\"confirm\\" data-v-a056081e>2</b>, [Textile] <b title=\\"http
textism.com\\" href=\\"http://textism.com/tools/textile/\\" chk=\\"confirm\\" data-v-a056081e>3</b>, [reStructuredText] <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/rst.html\\" chk=\\"confirm\\" data-v-a056081e>4</b>,
[Grutatext] <b title=\\"http
www.triptico.com\\" href=\\"http://www.triptico.com/software/grutatxt.html\\" chk=\\"confirm\\" data-v-a056081e>5</b>, and [EtText] <b title=\\"http
ettext.taint.org\\" href=\\"http://ettext.taint.org/doc/\\" chk=\\"confirm\\" data-v-a056081e>6</b> </s> the single biggest source of
inspiration for Markdown's syntax is the format of plain text email.


To this end, Markdown's syntax is comprised entirely of punctuation
characters, which punctuation characters have been carefully chosen so
as to look like what they mean. E.g., asterisks around a word actually
look like *emphasis*. Markdown lists look like, well, lists. Even
blockquotes look like quoted passages of text, assuming you've ever
used email.



&lt;h3 id=&quot;html&quot;&gt;Inline HTML&lt;/h3&gt;

Markdown's syntax is intended for one purpose: to be used as a
format for *writing* for the web.

Markdown is not a replacement for HTML, or even close to it. Its
syntax is very small, corresponding only to a very small subset of
HTML tags. The idea is *not* to create a syntax that makes it easier
to insert HTML tags. In my opinion, HTML tags are already easy to
insert. The idea for Markdown is to make it easy to read, write, and
edit prose. HTML is a *publishing* format; Markdown is a *writing*
format. Thus, Markdown's formatting syntax only addresses issues that
can be conveyed in plain text.

For any markup that is not covered by Markdown's syntax, you simply
use HTML itself. There's no need to preface it or delimit it to
indicate that you're switching from Markdown to HTML; you just use
the tags.

The only restrictions are that block-level HTML elements <s data-v-a056081e> e.g. <code data-v-a056081e>&lt;div&gt;</code>,
<code data-v-a056081e>&lt;table&gt;</code>, <code data-v-a056081e>&lt;pre&gt;</code>, <code data-v-a056081e>&lt;p&gt;</code>, etc. </s> must be separated from surrounding
content by blank lines, and the start and end tags of the block should
not be indented with tabs or spaces. Markdown is smart enough not
to add extra (unwanted) <code data-v-a056081e>&lt;p&gt;</code> tags around HTML block-level tags.

For example, to add an HTML table to a Markdown article:

    This is a regular paragraph.

    &lt;table&gt;
        &lt;tr&gt;
            &lt;td&gt;Foo&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;

    This is another regular paragraph.

Note that Markdown formatting syntax is not processed within block-level
HTML tags. E.g., you can't use Markdown-style <code data-v-a056081e>*emphasis*</code> inside an
HTML block.

Span-level HTML tags <s data-v-a056081e> e.g. <code data-v-a056081e>&lt;span&gt;</code>, <code data-v-a056081e>&lt;cite&gt;</code>, or <code data-v-a056081e>&lt;del&gt;</code> </s> can be
used anywhere in a Markdown paragraph, list item, or header. If you
want, you can even use HTML tags instead of Markdown formatting; e.g. if
you'd prefer to use HTML <code data-v-a056081e>&lt;a&gt;</code> or <code data-v-a056081e>&lt;img&gt;</code> tags instead of Markdown's
link or image syntax, go right ahead.

Unlike block-level HTML tags, Markdown syntax *is* processed within
span-level tags.


&lt;h3 id=&quot;autoescape&quot;&gt;Automatic Escaping for Special Characters&lt;/h3&gt;

In HTML, there are two characters that demand special treatment: <code data-v-a056081e>&lt;</code>
and <code data-v-a056081e>&amp;</code>. Left angle brackets are used to start tags; ampersands are
used to denote HTML entities. If you want to use them as literal
characters, you must escape them as entities, e.g. <code data-v-a056081e>&amp;lt;</code>, and
<code data-v-a056081e>&amp;amp;</code>.

Ampersands in particular are bedeviling for web writers. If you want to
write about 'AT&amp;T', you need to write '<code data-v-a056081e>AT&amp;amp;T</code>'. You even need to
escape ampersands within URLs. Thus, if you want to link to:

    <b title=\\"http
images.google.com\\" href=\\"http://images.google.com/images?num=30&amp;q=larry+bird\\" chk=\\"confirm\\" data-v-a056081e>http://images.google.com/images?num=30&amp;q=larry+bird</b>

you need to encode the URL as:

    <b title=\\"http
images.google.com\\" href=\\"http://images.google.com/images?num=30&amp;amp;q=larry+bird\\" chk=\\"confirm\\" data-v-a056081e>http://images.google.com/images?num=30&amp;amp;q=larry+bird</b>

in your anchor tag <code data-v-a056081e>href</code> attribute. Needless to say, this is easy to
forget, and is probably the single most common source of HTML validation
errors in otherwise well-marked-up web sites.

Markdown allows you to use these characters naturally, taking care of
all the necessary escaping for you. If you use an ampersand as part of
an HTML entity, it remains unchanged; otherwise it will be translated
into <code data-v-a056081e>&amp;amp;</code>.

So, if you want to include a copyright symbol in your article, you can write:

    &amp;copy;

and Markdown will leave it alone. But if you write:

    AT&amp;T

Markdown will translate it to:

    AT&amp;amp;T

Similarly, because Markdown supports <b title=\\"
html\\" href=\\"#html\\" chk=\\"confirm\\" data-v-a056081e>inline HTML</b>, if you use
angle brackets as delimiters for HTML tags, Markdown will treat them as
such. But if you write:

    4 &lt; 5

Markdown will translate it to:

    4 &amp;lt; 5

However, inside Markdown code spans and blocks, angle brackets and
ampersands are *always* encoded automatically. This makes it easy to use
Markdown to write about HTML code. (As opposed to raw HTML, which is a
terrible format for writing about HTML syntax, because every single <code data-v-a056081e>&lt;</code>
and <code data-v-a056081e>&amp;</code> in your example code needs to be escaped.)


<hr data-v-a056081e>

&lt;h2 id=&quot;block&quot;&gt;Block Elements&lt;/h2&gt;


&lt;h3 id=&quot;p&quot;&gt;Paragraphs and Line Breaks&lt;/h3&gt;

A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be intended with spaces or tabs.

The implication of the &quot;one or more consecutive lines of text&quot; rule is
that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type's &quot;Convert Line Breaks&quot; option) which translate every line break
character in a paragraph into a <code data-v-a056081e>&lt;br /&gt;</code> tag.

When you *do* want to insert a <code data-v-a056081e>&lt;br /&gt;</code> break tag using Markdown, you
end a line with two or more spaces, then type return.

Yes, this takes a tad more effort to create a <code data-v-a056081e>&lt;br /&gt;</code>, but a simplistic
&quot;every line break is a <code data-v-a056081e>&lt;br /&gt;</code>&quot; rule wouldn't work for Markdown.
Markdown's email-style <b title=\\"
blockquote\\" href=\\"#blockquote\\" chk=\\"confirm\\" data-v-a056081e>blockquoting</b> and multi-paragraph <b title=\\"
list\\" href=\\"#list\\" chk=\\"confirm\\" data-v-a056081e>list items</b>
work best <s data-v-a056081e> and look better </s> when you format them with hard breaks.




&lt;h3 id=&quot;header&quot;&gt;Headers&lt;/h3&gt;

Markdown supports two styles of headers, [Setext] <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/mirror/setext.html\\" chk=\\"confirm\\" data-v-a056081e>1</b> and [atx] <b title=\\"http
www.aaronsw.com\\" href=\\"http://www.aaronsw.com/2002/atx/\\" chk=\\"confirm\\" data-v-a056081e>2</b>.

Setext-style headers are &quot;underlined&quot; using equal signs (for first-level
headers) and dashes (for second-level headers). For example:

<h1 data-v-a056081e>    This is an H1</h1>
<h2 data-v-a056081e>    This is an H2</h2>
Any number of underlining <code data-v-a056081e>=</code>'s or <code data-v-a056081e>-</code>'s will work.

Atx-style headers use 1-6 hash characters at the start of the line,
corresponding to header levels 1-6. For example:

<h1 data-v-a056081e>This is an H1</h1>
<h2 data-v-a056081e>This is an H2</h2>
<h6 data-v-a056081e>This is an H6</h6>
Optionally, you may &quot;close&quot; atx-style headers. This is purely
cosmetic -- you can use this if you think it looks better. The
closing hashes don't even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.) :

<h1 data-v-a056081e>This is an H1</h1>
<h2 data-v-a056081e>This is an H2</h2>
<h3 data-v-a056081e>This is an H3</h3>

&lt;h3 id=&quot;blockquote&quot;&gt;Blockquotes&lt;/h3&gt;

Markdown uses email-style <code data-v-a056081e>&gt;</code> characters for blockquoting. If you're
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a <code data-v-a056081e>&gt;</code> before every line:

    &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
    &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
    &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
    &gt;
    &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
    &gt; id sem consectetuer libero luctus adipiscing.

Markdown allows you to be lazy and only put the <code data-v-a056081e>&gt;</code> before the first
line of a hard-wrapped paragraph:

    &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

    &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
    id sem consectetuer libero luctus adipiscing.

Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of <code data-v-a056081e>&gt;</code>:

    &gt; This is the first level of quoting.
    &gt;
    &gt; &gt; This is nested blockquote.
    &gt;
    &gt; Back to the first level.

Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:

    &gt; ## This is a header.
    &gt;
    &gt; 1.   This is the first list item.
    &gt; 2.   This is the second list item.
    &gt;
    &gt; Here's some example code:
    &gt;
    &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);

Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.


&lt;h3 id=&quot;list&quot;&gt;Lists&lt;/h3&gt;

Markdown supports ordered (numbered) and unordered (bulleted) lists.

Unordered lists use asterisks, pluses, and hyphens <s data-v-a056081e> interchangably
</s> as list markers:

<ul data-v-a056081e><li data-v-a056081e>Red</li><li data-v-a056081e>Green</li><li data-v-a056081e>Blue

</li></ul>is equivalent to:

<ul data-v-a056081e><li data-v-a056081e>Red</li><li data-v-a056081e>Green</li><li data-v-a056081e>Blue

</li></ul>and:

<ul data-v-a056081e><li data-v-a056081e>Red</li><li data-v-a056081e>Green</li><li data-v-a056081e>Blue

</li></ul>Ordered lists use numbers followed by periods:

<ol data-v-a056081e><li data-v-a056081e>Bird</li><li data-v-a056081e>McHale</li><li data-v-a056081e>Parish

</li></ol>It's important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:

    &lt;ol&gt;
    &lt;li&gt;Bird&lt;/li&gt;
    &lt;li&gt;McHale&lt;/li&gt;
    &lt;li&gt;Parish&lt;/li&gt;
    &lt;/ol&gt;

If you instead wrote the list in Markdown like this:

<ol data-v-a056081e><li data-v-a056081e>Bird</li><li data-v-a056081e>McHale</li><li data-v-a056081e>Parish

</li></ol>or even:

<ol start=\\"3\\" data-v-a056081e><li data-v-a056081e>Bird</li><li data-v-a056081e>McHale</li><li data-v-a056081e>Parish

</li></ol>you'd get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don't have to.

If you do use lazy list numbering, however, you should still start the
list with the number 1. At some point in the future, Markdown may support
starting ordered lists at an arbitrary number.

List markers typically start at the left margin, but may be indented by
up to three spaces. List markers must be followed by one or more spaces
or a tab.

To make lists look nice, you can wrap items with hanging indents:

<ul data-v-a056081e><li data-v-a056081e>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.</li><li data-v-a056081e>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.

</li></ul>But if you want to be lazy, you don't have to:

<ul data-v-a056081e><li data-v-a056081e>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.</li><li data-v-a056081e>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.

</li></ul>If list items are separated by blank lines, Markdown will wrap the
items in <code data-v-a056081e>&lt;p&gt;</code> tags in the HTML output. For example, this input:

<ul data-v-a056081e><li data-v-a056081e>Bird</li><li data-v-a056081e>Magic

</li></ul>will turn into:

    &lt;ul&gt;
    &lt;li&gt;Bird&lt;/li&gt;
    &lt;li&gt;Magic&lt;/li&gt;
    &lt;/ul&gt;

But this:

<ul data-v-a056081e><li data-v-a056081e>Bird
</li><li data-v-a056081e>Magic

</li></ul>will turn into:

    &lt;ul&gt;
    &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
    &lt;/ul&gt;

List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be intended by either 4 spaces
or one tab:

<ol data-v-a056081e><li data-v-a056081e>This is a list item with two paragraphs. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit. Aliquam hendrerit
mi posuere lectus.

Vestibulum enim wisi, viverra nec, fringilla in, laoreet
vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
sit amet velit.
</li><li data-v-a056081e>Suspendisse id sem consectetuer libero luctus adipiscing.

</li></ol>It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:

<ul data-v-a056081e><li data-v-a056081e>This is a list item with two paragraphs.

This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.
</li><li data-v-a056081e>Another item in the same list.

</li></ul>To put a blockquote within a list item, the blockquote's <code data-v-a056081e>&gt;</code>
delimiters need to be indented:

<ul data-v-a056081e><li data-v-a056081e>A list item with a blockquote:

<blockquote data-v-a056081e>This is a blockquote
inside a list item.</blockquote>
</li></ul>To put a code block within a list item, the code block needs
to be indented *twice* -- 8 spaces or two tabs:

<ul data-v-a056081e><li data-v-a056081e>A list item with a code block:

    &lt;code goes here&gt;


</li></ul>It's worth noting that it's possible to trigger an ordered list by
accident, by writing something like this:

<ol start=\\"1986\\" data-v-a056081e><li data-v-a056081e>What a great season.

</li></ol>In other words, a *number-period-space* sequence at the beginning of a
line. To avoid this, you can backslash-escape the period:

    1986. What a great season.



&lt;h3 id=&quot;precode&quot;&gt;Code Blocks&lt;/h3&gt;

Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both <code data-v-a056081e>&lt;pre&gt;</code> and <code data-v-a056081e>&lt;code&gt;</code> tags.

To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab. For example, given this input:

    This is a normal paragraph:

        This is a code block.

Markdown will generate:

    &lt;p&gt;This is a normal paragraph:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;This is a code block.
    &lt;/code&gt;&lt;/pre&gt;

One level of indentation <s data-v-a056081e> 4 spaces or 1 tab </s> is removed from each
line of the code block. For example, this:

    Here is an example of AppleScript:

        tell application &quot;Foo&quot;
            beep
        end tell

will turn into:

    &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
        beep
    end tell
    &lt;/code&gt;&lt;/pre&gt;

A code block continues until it reaches a line that is not indented
(or the end of the article).

Within a code block, ampersands (<code data-v-a056081e>&amp;</code>) and angle brackets (<code data-v-a056081e>&lt;</code> and <code data-v-a056081e>&gt;</code>)
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown -- just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:

        &lt;div class=&quot;footer&quot;&gt;
            &amp;copy; 2004 Foo Corporation
        &lt;/div&gt;

will turn into:

    &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
        &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;
    &lt;/code&gt;&lt;/pre&gt;

Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it's also easy to use Markdown to write about Markdown's own syntax.



&lt;h3 id=&quot;hr&quot;&gt;Horizontal Rules&lt;/h3&gt;

You can produce a horizontal rule tag (<code data-v-a056081e>&lt;hr /&gt;</code>) by placing three or
more hyphens, asterisks, or underscores on a line by themselves. If you
wish, you may use spaces between the hyphens or asterisks. Each of the
following lines will produce a horizontal rule:

<ul data-v-a056081e><li data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>*

</li></ul></li></ul>    ***

    *****
    
<ul data-v-a056081e><li data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>-

</li></ul></li></ul>    ---------------------------------------

    _ _ _


<hr data-v-a056081e>
&lt;h2 id=&quot;span&quot;&gt;Span Elements&lt;/h2&gt;

&lt;h3 id=&quot;link&quot;&gt;Links&lt;/h3&gt;

Markdown supports two style of links: *inline* and *reference*.

In both styles, the link text is delimited by [square brackets].

To create an inline link, use a set of regular parentheses immediately
after the link text's closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an *optional*
title for the link, surrounded in quotes. For example:

    This is <b title=\\"Title\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>an example</b> inline link.

    <b title=\\"http
example.net\\" href=\\"http://example.net/\\" chk=\\"confirm\\" data-v-a056081e>This link</b> has no title attribute.

Will produce:

    &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
    an example&lt;/a&gt; inline link.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
    title attribute.&lt;/p&gt;

If you're referring to a local resource on the same server, you can
use relative paths:

    See my <b title=\\"
about\\" href=\\"/about/\\" chk=\\"confirm\\" data-v-a056081e>About</b> page for details.

Reference-style links use a second set of square brackets, inside
which you place a label of your choosing to identify the link:

    This is [an example][id] reference-style link.

You can optionally use a space to separate the sets of brackets:

    This is [an example] [id] reference-style link.

Then, anywhere in the document, you define your link label like this,
on a line by itself:

    [id]: <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>  &quot;Optional Title Here&quot;

That is:

<ul data-v-a056081e><li data-v-a056081e>Square brackets containing the link identifier (optionally
indented from the left margin using up to three spaces);</li><li data-v-a056081e>followed by a colon;</li><li data-v-a056081e>followed by one or more spaces (or tabs);</li><li data-v-a056081e>followed by the URL for the link;</li><li data-v-a056081e>optionally followed by a title attribute for the link, enclosed
in double or single quotes.

</li></ul>The link URL may, optionally, be surrounded by angle brackets:

    [id]: <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>  &quot;Optional Title Here&quot;

You can put the title attribute on the next line and use extra spaces
or tabs for padding, which tends to look better with longer URLs:

    [id]: <b title=\\"http
example.com\\" href=\\"http://example.com/longish/path/to/resource/here\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/longish/path/to/resource/here</b>
        &quot;Optional Title Here&quot;

Link definitions are only used for creating links during Markdown
processing, and are stripped from your document in the HTML output.

Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are *not* case sensitive. E.g. these two links:

    [link text][a]
    [link text][A]

are equivalent.

The *implicit link name* shortcut allows you to omit the name of the
link, in which case the link text itself is used as the name.
Just use an empty set of square brackets -- e.g., to link the word
&quot;Google&quot; to the google.com web site, you could simply write:

    [Google][]

And then define the link:

    [Google]: <b title=\\"http
google.com\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>http://google.com/</b>

Because link names may contain spaces, this shortcut even works for
multiple words in the link text:

    Visit [Daring Fireball][] for more information.

And then define the link:

    [Daring Fireball]: <b title=\\"http
daringfireball.net\\" href=\\"http://daringfireball.net/\\" chk=\\"confirm\\" data-v-a056081e>http://daringfireball.net/</b>

Link definitions can be placed anywhere in your Markdown document. I
tend to put them immediately after each paragraph in which they're
used, but if you want, you can put them all at the end of your
document, sort of like footnotes.

Here's an example of reference links in action:

    I get 10 times more traffic from [Google] <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/mirror/setext.html\\" chk=\\"confirm\\" data-v-a056081e>1</b> than from
    [Yahoo] <b title=\\"http
www.aaronsw.com\\" href=\\"http://www.aaronsw.com/2002/atx/\\" chk=\\"confirm\\" data-v-a056081e>2</b> or [MSN] <b title=\\"http
textism.com\\" href=\\"http://textism.com/tools/textile/\\" chk=\\"confirm\\" data-v-a056081e>3</b>.

      <b title=\\"http
docutils.sourceforge.net\\" href=\\"http://docutils.sourceforge.net/mirror/setext.html\\" chk=\\"confirm\\" data-v-a056081e>1</b>: <b title=\\"http
google.com\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>http://google.com/</b>        &quot;Google&quot;
      <b title=\\"http
www.aaronsw.com\\" href=\\"http://www.aaronsw.com/2002/atx/\\" chk=\\"confirm\\" data-v-a056081e>2</b>: <b title=\\"http
search.yahoo.com\\" href=\\"http://search.yahoo.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.yahoo.com/</b>  &quot;Yahoo Search&quot;
      <b title=\\"http
textism.com\\" href=\\"http://textism.com/tools/textile/\\" chk=\\"confirm\\" data-v-a056081e>3</b>: <b title=\\"http
search.msn.com\\" href=\\"http://search.msn.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.msn.com/</b>    &quot;MSN Search&quot;

Using the implicit link name shortcut, you could instead write:

    I get 10 times more traffic from [Google][] than from
    [Yahoo][] or [MSN][].

      [google]: <b title=\\"http
google.com\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>http://google.com/</b>        &quot;Google&quot;
      [yahoo]:  <b title=\\"http
search.yahoo.com\\" href=\\"http://search.yahoo.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.yahoo.com/</b>  &quot;Yahoo Search&quot;
      [msn]:    <b title=\\"http
search.msn.com\\" href=\\"http://search.msn.com/\\" chk=\\"confirm\\" data-v-a056081e>http://search.msn.com/</b>    &quot;MSN Search&quot;

Both of the above examples will produce the following HTML output:

    &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
    title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
    &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
    or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;

For comparison, here is the same paragraph written using
Markdown's inline link style:

    I get 10 times more traffic from <b title=\\"Google\\" href=\\"http://google.com/\\" chk=\\"confirm\\" data-v-a056081e>Google</b>
    than from <b title=\\"Yahoo Search\\" href=\\"http://search.yahoo.com/\\" chk=\\"confirm\\" data-v-a056081e>Yahoo</b> or
    <b title=\\"MSN Search\\" href=\\"http://search.msn.com/\\" chk=\\"confirm\\" data-v-a056081e>MSN</b>.

The point of reference-style links is not that they're easier to
write. The point is that with reference-style links, your document
source is vastly more readable. Compare the above examples: using
reference-style links, the paragraph itself is only 81 characters
long; with inline-style links, it's 176 characters; and as raw HTML,
it's 234 characters. In the raw HTML, there's more markup than there
is text.

With Markdown's reference-style links, a source document much more
closely resembles the final output, as rendered in a browser. By
allowing you to move the markup-related metadata out of the paragraph,
you can add links without interrupting the narrative flow of your
prose.


&lt;h3 id=&quot;em&quot;&gt;Emphasis&lt;/h3&gt;

Markdown treats asterisks (<code data-v-a056081e>*</code>) and underscores (<code data-v-a056081e>_</code>) as indicators of
emphasis. Text wrapped with one <code data-v-a056081e>*</code> or <code data-v-a056081e>_</code> will be wrapped with an
HTML <code data-v-a056081e>&lt;em&gt;</code> tag; double <code data-v-a056081e>*</code>'s or <code data-v-a056081e>_</code>'s will be wrapped with an HTML
<code data-v-a056081e>&lt;strong&gt;</code> tag. E.g., this input:

    *single asterisks*

    _single underscores_

    <strong data-v-a056081e>double asterisks</strong>

    <strong data-v-a056081e>double underscores</strong>

will produce:

    &lt;em&gt;single asterisks&lt;/em&gt;

    &lt;em&gt;single underscores&lt;/em&gt;

    &lt;strong&gt;double asterisks&lt;/strong&gt;

    &lt;strong&gt;double underscores&lt;/strong&gt;

You can use whichever style you prefer; the lone restriction is that
the same character must be used to open and close an emphasis span.

Emphasis can be used in the middle of a word:

    un*fucking*believable

But if you surround an <code data-v-a056081e>*</code> or <code data-v-a056081e>_</code> with spaces, it'll be treated as a
literal asterisk or underscore.

To produce a literal asterisk or underscore at a position where it
would otherwise be used as an emphasis delimiter, you can backslash
escape it:

    *this text is surrounded by literal asterisks*



&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

To indicate a span of code, wrap it with backtick quotes (<code data-v-a056081e>\` </code>).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:

    Use the <code data-v-a056081e>printf()</code> function.

will produce:

    &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;

To include a literal backtick character within a code span, you can use
multiple backticks as the opening and closing delimiters:

    <code data-v-a056081e>There is a literal backtick (\`) here.</code>

which will produce this:

    &lt;p&gt;&lt;code&gt;There is a literal backtick (\`) here.&lt;/code&gt;&lt;/p&gt;

The backtick delimiters surrounding a code span may include spaces --
one after the opening, one before the closing. This allows you to place
literal backtick characters at the beginning or end of a code span:

    A single backtick in a code span: <code data-v-a056081e>\` </code>

    A backtick-delimited string in a code span: <code data-v-a056081e>\`foo\` </code>

will produce:

    &lt;p&gt;A single backtick in a code span: &lt;code&gt;<code data-v-a056081e>&lt;/code&gt;&lt;/p&gt;
    
    &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;</code>foo\`&lt;/code&gt;&lt;/p&gt;

With a code span, ampersands and angle brackets are encoded as HTML
entities automatically, which makes it easy to include example HTML
tags. Markdown will turn this:

    Please don't use any <code data-v-a056081e>&lt;blink&gt;</code> tags.

into:

    &lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

You can write this:

    <code data-v-a056081e>&amp;#8212;</code> is the decimal-encoded equivalent of <code data-v-a056081e>&amp;mdash;</code>.

to produce:

    &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
    equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;



&lt;h3 id=&quot;img&quot;&gt;Images&lt;/h3&gt;

Admittedly, it's fairly difficult to devise a &quot;natural&quot; syntax for
placing images into a plain text document format.

Markdown uses an image syntax that is intended to resemble the syntax
for links, allowing for two styles: *inline* and *reference*.

Inline image syntax looks like this:

    <img src=\\"/path/to/img.jpg\\" alt=\\"Alt text\\" data-v-a056081e>

    <img src=\\"/path/to/img.jpg\\" alt=\\"Alt text\\" title=\\"Optional title\\" data-v-a056081e>

That is:

<ul data-v-a056081e><li data-v-a056081e>An exclamation mark: <code data-v-a056081e>!</code>;</li><li data-v-a056081e>followed by a set of square brackets, containing the <code data-v-a056081e>alt</code>
attribute text for the image;</li><li data-v-a056081e>followed by a set of parentheses, containing the URL or path to
the image, and an optional <code data-v-a056081e>title</code> attribute enclosed in double
or single quotes.

</li></ul>Reference-style image syntax looks like this:

    ![Alt text][id]

Where &quot;id&quot; is the name of a defined image reference. Image references
are defined using syntax identical to link references:

    [id]: url/to/image  &quot;Optional title attribute&quot;

As of this writing, Markdown has no syntax for specifying the
dimensions of an image; if this is important to you, you can simply
use regular HTML <code data-v-a056081e>&lt;img&gt;</code> tags.


<hr data-v-a056081e>

&lt;h2 id=&quot;misc&quot;&gt;Miscellaneous&lt;/h2&gt;

&lt;h3 id=&quot;autolink&quot;&gt;Automatic Links&lt;/h3&gt;

Markdown supports a shortcut style for creating &quot;automatic&quot; links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:

    <b title=\\"http
example.com\\" href=\\"http://example.com/\\" chk=\\"confirm\\" data-v-a056081e>http://example.com/</b>

Markdown will turn this into:

    &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;

Automatic links for email addresses work similarly, except that
Markdown will also perform a bit of randomized decimal and hex
entity-encoding to help obscure your address from address-harvesting
spambots. For example, Markdown will turn this:

    <b title=\\"mailto:address@example.com
\\" href=\\"mailto:address@example.com\\" chk=\\"confirm\\" data-v-a056081e>address@example.com</b>

into something like this:

    &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
    &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
    &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
    &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;

which will render in a browser as a clickable link to &quot;<b title=\\"mailto:address@example.com
\\" href=\\"mailto:address@example.com\\" chk=\\"confirm\\" data-v-a056081e>address@example.com</b>&quot;.

(This sort of entity-encoding trick will indeed fool many, if not
most, address-harvesting bots, but it definitely won't fool all of
them. It's better than nothing, but an address published in this way
will probably eventually start receiving spam.)



&lt;h3 id=&quot;backslash&quot;&gt;Backslash Escapes&lt;/h3&gt;

Markdown allows you to use backslash escapes to generate literal
characters which would otherwise have special meaning in Markdown's
formatting syntax. For example, if you wanted to surround a word with
literal asterisks (instead of an HTML <code data-v-a056081e>&lt;em&gt;</code> tag), you can backslashes
before the asterisks, like this:

    *literal asterisks*

Markdown provides backslash escapes for the following characters:

    \\\\   backslash
    \`   backtick
<ul data-v-a056081e><li data-v-a056081e>asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
<h1 data-v-a056081e>hash mark</h1></li><li data-v-a056081e>plus sign</li><li data-v-a056081e>minus sign (hyphen)
.   dot
!   exclamation mark

</li></ul></article>"
`;

exports[`./__tests__/original/nested_blockquotes.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><blockquote data-v-a056081e>foo

<blockquote data-v-a056081e>bar</blockquote>
foo</blockquote></article>"
`;

exports[`./__tests__/original/ordered_and_unordered_lists.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><h2 data-v-a056081e>Unordered</h2>
Asterisks tight:

<ul data-v-a056081e><li data-v-a056081e>asterisk 1</li><li data-v-a056081e>asterisk 2</li><li data-v-a056081e>asterisk 3


</li></ul>Asterisks loose:

<ul data-v-a056081e><li data-v-a056081e>asterisk 1
</li><li data-v-a056081e>asterisk 2
</li><li data-v-a056081e>asterisk 3

</li></ul><hr data-v-a056081e>
Pluses tight:

<ul data-v-a056081e><li data-v-a056081e>Plus 1</li><li data-v-a056081e>Plus 2</li><li data-v-a056081e>Plus 3


</li></ul>Pluses loose:

<ul data-v-a056081e><li data-v-a056081e>Plus 1
</li><li data-v-a056081e>Plus 2
</li><li data-v-a056081e>Plus 3

</li></ul><hr data-v-a056081e>

Minuses tight:

<ul data-v-a056081e><li data-v-a056081e>Minus 1</li><li data-v-a056081e>Minus 2</li><li data-v-a056081e>Minus 3


</li></ul>Minuses loose:

<ul data-v-a056081e><li data-v-a056081e>Minus 1
</li><li data-v-a056081e>Minus 2
</li><li data-v-a056081e>Minus 3


</li></ul><h2 data-v-a056081e>Ordered</h2>
Tight:

<ol data-v-a056081e><li data-v-a056081e>First</li><li data-v-a056081e>Second</li><li data-v-a056081e>Third

</li></ol>and:

<ol data-v-a056081e><li data-v-a056081e>One</li><li data-v-a056081e>Two</li><li data-v-a056081e>Three


</li></ol>Loose using tabs:

<ol data-v-a056081e><li data-v-a056081e>First
</li><li data-v-a056081e>Second
</li><li data-v-a056081e>Third

</li></ol>and using spaces:

<ol data-v-a056081e><li data-v-a056081e>One
</li><li data-v-a056081e>Two
</li><li data-v-a056081e>Three

</li></ol>Multiple paragraphs:

<ol data-v-a056081e><li data-v-a056081e>Item 1, graf one.

Item 2. graf two. The quick brown fox jumped over the lazy dog's
back.
</li><li data-v-a056081e>Item 2.
</li><li data-v-a056081e>Item 3.



</li></ol><h2 data-v-a056081e>Nested</h2>
<ul data-v-a056081e><li data-v-a056081e>Tab
<ul data-v-a056081e><li data-v-a056081e>Tab
<ul data-v-a056081e><li data-v-a056081e>Tab

</li></ul></li></ul></li></ul>Here's another:

<ol data-v-a056081e><li data-v-a056081e>First</li><li data-v-a056081e>Second:
<ul data-v-a056081e><li data-v-a056081e>Fee</li><li data-v-a056081e>Fie</li><li data-v-a056081e>Foe</li></ul></li><li data-v-a056081e>Third

</li></ol>Same thing but with paragraphs:

<ol data-v-a056081e><li data-v-a056081e>First
</li><li data-v-a056081e>Second:
<ul data-v-a056081e><li data-v-a056081e>Fee</li><li data-v-a056081e>Fie</li><li data-v-a056081e>Foe
</li></ul></li><li data-v-a056081e>Third


</li></ol>This was an error in Markdown 1.0.1:

<ul data-v-a056081e><li data-v-a056081e>this

<ul data-v-a056081e><li data-v-a056081e>sub

</li></ul>that

</li></ul>Ordered lists start from initial number:

<ol start=\\"3\\" data-v-a056081e><li data-v-a056081e>Three</li><li data-v-a056081e>Four

</li></ol>Ordered lists start from initial zero:

<ol start=\\"0\\" data-v-a056081e><li data-v-a056081e>Zero</li><li data-v-a056081e>One
</li></ol></article>"
`;

exports[`./__tests__/original/strong_and_em_together.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><strong data-v-a056081e>*This is strong and em.*</strong>

So is <strong data-v-a056081e>*this*</strong> word.

<strong data-v-a056081e>_This is strong and em._</strong>

So is <strong data-v-a056081e>_this_</strong> word.
</article>"
`;

exports[`./__tests__/original/tabs.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><ul data-v-a056081e><li data-v-a056081e>this is a list item
indented with tabs
</li><li data-v-a056081e>this is a list item
indented with spaces

</li></ul>Code:

    this code block is indented by one tab

And:

        this code block is indented by two tabs

And:

<ul data-v-a056081e><li data-v-a056081e>this is an example list item
indented with tabs
</li><li data-v-a056081e>this is an example list item
indented with spaces
</li></ul></article>"
`;

exports[`./__tests__/original/tidyness.md snapshot 1`] = `
"<article data-server-rendered=\\"true\\" data-v-a056081e><blockquote data-v-a056081e>A list within a blockquote:

<ul data-v-a056081e><li data-v-a056081e>asterisk 1</li><li data-v-a056081e>asterisk 2</li><li data-v-a056081e>asterisk 3</li></ul></blockquote></article>"
`;
